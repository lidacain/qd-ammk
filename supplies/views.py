import os
import datetime
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.conf import settings
from django.contrib.auth.decorators import login_required
from users.decorators import role_required
from .models import Post, TraceData, Defect, Detail, DefectGrade, DefectResponsible, BodyDetail
from .forms import ContainerUnloadingZone2InspectionForm, ContainerUnloadingZoneSBInspectionForm, ComponentUnloadingZoneDKDForm, BodyUnloadingZoneDKDForm, MainUnloadingZoneDKDForm, ContainerInspectionForm
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from users.models import Notification, CustomUser
from django.utils.timezone import now
from vehicle_history.models import VINHistory, ContainerHistory
from django.http import JsonResponse
from django.db.models import Q
from .models import TraceData
import json
from vehicle_history.utils import now_almaty_iso
from PIL import Image, ImageOps
from io import BytesIO
from django.core.files.uploadedfile import InMemoryUploadedFile
import sys
import time
import os
from urllib.parse import unquote
from django.urls import reverse
import uuid

from uuid import uuid4
from pathlib import Path
from PIL import Image, ImageOps


def compress_uploaded_image(uploaded_file, quality=60, max_width=1600):
    """
    –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç InMemoryUploadedFile —Å –£–ù–ò–ö–ê–õ–¨–ù–´–ú –∏–º–µ–Ω–µ–º.
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Pillow 9/10+ –∏ iPhone (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –ø–æ EXIF).
    """
    try:
        # —á–∏—Ç–∞–µ–º –∏ –ø—Ä–∞–≤–∏–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (iPhone), –ø—Ä–∏–≤–æ–¥–∏–º –∫ RGB
        img = Image.open(uploaded_file)
        try:
            img = ImageOps.exif_transpose(img)
        except Exception:
            pass
        if img.mode in ("RGBA", "P"):
            img = img.convert("RGB")

        # —Ä–µ—Å–∞–π–∑ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º (Pillow 10+)
        try:
            resample = Image.Resampling.LANCZOS
        except AttributeError:          # Pillow <10
            resample = Image.LANCZOS

        if img.width > max_width:
            ratio = max_width / float(img.width)
            new_h = int(img.height * ratio)
            img = img.resize((max_width, new_h), resample)

        buf = BytesIO()
        img.save(buf, format="JPEG", quality=quality, optimize=True)
        buf.seek(0)

        # —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è: <–∏—Å—Ö–æ–¥–Ω–æ–µ>_<uuid>.jpg
        orig_name = getattr(uploaded_file, "name", "upload.jpg")
        base = Path(orig_name).stem
        new_filename = f"{base}_{uuid4().hex}.jpg"

        return InMemoryUploadedFile(
            file=buf,
            field_name=None,
            name=new_filename,
            content_type="image/jpeg",
            size=buf.getbuffer().nbytes,
            charset=None,
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏:", e)
        try:
            uploaded_file.seek(0)
        except Exception:
            pass
        return uploaded_file

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
GOOGLE_SHEETS_CREDENTIALS = os.path.join(settings.BASE_DIR, "daring-hash-403304-f75ea5c718bb.json")  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å
SPREADSHEET_ID = "1rp8JT2xaT1At86XRUxM_bu2lgY8iCfcJw-xZokdubeY"
SHEET_NAME = "–õ–∏—Å—Ç1"

# üîπ –ë–∞–∑–æ–≤—ã–π URL –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
BASE_MEDIA_URL = "http://127.0.0.1:8000/media/"


def append_to_google_sheets(data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets."""
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDENTIALS, scope)
        client = gspread.authorize(creds)

        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        sheet.append_row(data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")



def view_image(request, image_path):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    image_path = unquote(image_path)
    image_url = f"{settings.MEDIA_URL}{image_path}"

    # üîÅ –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    group_key = request.GET.get("group")
    try:
        index = int(request.GET.get("index", 0))
    except ValueError:
        index = 0

    photos = [image_url]  # fallback

    if request.GET.get("photos"):
        try:
            photos = json.loads(request.GET.get("photos"))
        except json.JSONDecodeError:
            pass

    # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    full_path = os.path.join(settings.MEDIA_ROOT, image_path)
    if not os.path.exists(full_path):
        messages.error(request, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect("assembly_workshop_dashboard")

    return render(request, "supplies/view_image.html", {
        "image_url": image_url,
        "all_photos": json.dumps(photos),  # üì¶ –¥–ª—è JS
        "current_index": index,
    })


def search_engine_number(request):
    query = request.GET.get("q", "").strip()
    if not query:
        return JsonResponse({"results": []})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
    engines = TraceData.objects.filter(engine_number__icontains=query)[:5]

    if not engines.exists():
        return JsonResponse({"results": [], "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É"})

    results = [
        {
            "engine_number": engine.engine_number,
            "vin": engine.vin_rk,
            "model": engine.model,
            "body_color": engine.body_color
        }
        for engine in engines
    ]

    return JsonResponse({"results": results})


def search_vin(request):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–∑–æ–≤–µ –ø–æ VIN.
    """
    query = request.GET.get("q", "").strip()
    if not query:
        return JsonResponse({"results": []})

    # –ü–æ–∏—Å–∫ –ø–æ VIN –≤ TraceData (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏)
    vins = TraceData.objects.filter(vin_rk__icontains=query)[:5]

    if not vins.exists():
        return JsonResponse({"results": [], "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É VIN"})

    results = [
        {
            "vin": vin.vin_rk,
            "engine_number": vin.engine_number,
            "config_code": vin.config_code,
            "model": vin.model,
            "body_color": vin.body_color,
            "drive_type": vin.modification,  # –µ—Å–ª–∏ —Ç—ã –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—à—å –∫–∞–∫ "—Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞"
        }
        for vin in vins
    ]

    return JsonResponse({"results": results})


def vin_defects_api(request):
    vin = request.GET.get("vin")
    if not vin:
        return JsonResponse({"error": "VIN –Ω–µ —É–∫–∞–∑–∞–Ω"}, status=400)

    try:
        history_entry = VINHistory.objects.get(vin=vin)
    except VINHistory.DoesNotExist:
        return JsonResponse({"defects": []})  # –ï—Å–ª–∏ VIN –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    defects_list = []

    # ‚úÖ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ—Ñ–µ–∫—Ç–∞–º
    for zone, zone_data in history_entry.history.items():
        for post_name, inspections in zone_data.items():
            for inspection in inspections:
                # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º repair_type –∏ repair_type_description –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                inspection_repair_type = inspection.get("repair_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                inspection_repair_type_description = inspection.get("repair_type_description", "-")

                for defect in inspection.get("defects", []):
                    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ repair_type –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–µ—Ñ–µ–∫—Ç–∞ (–¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö)
                    defect_repair_type = defect.get("repair_type", inspection_repair_type)
                    defect_repair_type_description = defect.get("repair_type_description", inspection_repair_type_description)

                    # ‚úÖ –ï—Å–ª–∏ repair_type —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —Å–æ–µ–¥–∏–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ ", "
                    if isinstance(defect_repair_type, list):
                        defect_repair_type = ", ".join(defect_repair_type)
                    elif not defect_repair_type:
                        defect_repair_type = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                    defects_list.append({
                        "zone": zone,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                        "post": post_name,
                        "repair_type": defect_repair_type,
                        "repair_type_description": defect_repair_type_description,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞
                        "grade": defect.get("grade", ""),
                        "detail": defect.get("detail", ""),
                        "custom_detail_explanation": defect.get("custom_detail_explanation", "-"),
                        "defect": defect.get("defect", ""),
                        "custom_defect_explanation": defect.get("custom_defect_explanation", "-"),
                        "quantity": defect.get("quantity", ""),
                        "responsible": defect.get("responsible", ""),
                        "defect_photos": defect.get("defect_photos", []),
                    })

    return JsonResponse({"defects": defects_list})


@login_required
@role_required(["controller", 'master'])
def container_unloading_zone_2(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –≤ –∑–æ–Ω–µ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–≠—Ç–∞–∂ 2).
    """
    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    if not request.user.is_authenticated:
        messages.error(request, "–û—à–∏–±–∫–∞: –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–∞.")
        return redirect("/login/")

    details = Detail.objects.filter(posts=post)
    defects = Defect.objects.filter(posts=post)

    if request.method == "POST":
        form = ContainerUnloadingZone2InspectionForm(request.POST, request.FILES, post=post)
        if form.is_valid():
            inspection = form.save(commit=False)
            inspection.post = post
            inspection.controller = request.user

            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/containers"), exist_ok=True)
            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/pallets"), exist_ok=True)
            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/defects"), exist_ok=True)

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if "container_image" in request.FILES:
                file = request.FILES["container_image"]
                file_path = f"images/containers/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                inspection.container_image = file_path

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–∞–ª–µ—Ç—ã
            if "pallet_image" in request.FILES:
                file = request.FILES["pallet_image"]
                file_path = f"images/pallets/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                inspection.pallet_image = file_path

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            defect_image_urls = []
            defect_images = form.cleaned_data["defect_images"]  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

            for file in defect_images:
                file_path = f"images/defects/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                defect_image_urls.append(f"{BASE_MEDIA_URL}{file_path}")

            inspection.defect_images = ", ".join(defect_image_urls) if defect_image_urls else "-"

            inspection.save()

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            container_image_url = f"{BASE_MEDIA_URL}{inspection.container_image}" if inspection.container_image else "-"
            pallet_image_url = f"{BASE_MEDIA_URL}{inspection.pallet_image}" if inspection.pallet_image else "-"

            data = [
                now, post.name, inspection.container_number, inspection.pallet_number,
                inspection.detail.name if inspection.detail else "-",
                inspection.defect.name if inspection.defect else "-",
                container_image_url, pallet_image_url, inspection.defect_images
            ]

            append_to_google_sheets(data)

            messages.success(request, "‚úÖ –î–µ—Ñ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return redirect(f"/supplies/container_unloading_zone_2/?post_id={post.id}")

    else:
        form = ContainerUnloadingZone2InspectionForm(post=post)

    return render(request, "supplies/container_unloading_zone_2.html", {
        "form": form,
        "post": post,
        "details": details,
        "defects": defects,
    })


@login_required
@role_required(["controller", 'master'])
def container_unloading_zone_sb(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –≤ –∑–æ–Ω–µ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ SB.
    """
    if request.method == "POST":
        form = ContainerUnloadingZoneSBInspectionForm(request.POST, request.FILES)
        if form.is_valid():
            inspection = form.save(commit=False)

            # ‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –¥–µ—Ñ–µ–∫—Ç)
            inspection.controller = request.user

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç—É
            post_id = request.GET.get("post_id")
            inspection.post = get_object_or_404(Post, id=post_id)

            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/containers"), exist_ok=True)
            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/container_numbers"), exist_ok=True)
            os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/container_seals"), exist_ok=True)

            container_image_urls = []
            container_images = form.cleaned_data["container_images"]

            for file in container_images:
                file_path = f"images/containers/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                container_image_urls.append(f"{settings.MEDIA_URL}{file_path}")

            inspection.container_images = ", ".join(container_image_urls) if container_image_urls else "-"

            if "container_number_image" in request.FILES:
                file = request.FILES["container_number_image"]
                file_path = f"images/container_numbers/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                inspection.container_number_image = file_path

            if "seal_image" in request.FILES:
                file = request.FILES["seal_image"]
                file_path = f"images/container_seals/{file.name}"
                with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                inspection.seal_image = file_path

            inspection.save()

            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            container_image_urls = inspection.container_images if inspection.container_images else "-"
            container_number_image_url = f"{settings.MEDIA_URL}{inspection.container_number_image}" if inspection.container_number_image else "-"
            seal_image_url = f"{settings.MEDIA_URL}{inspection.seal_image}" if inspection.seal_image else "-"

            data = [
                now, inspection.container_number, container_image_urls,
                container_number_image_url, inspection.container_description,
                seal_image_url, inspection.seal_description, inspection.container_status
            ]

            append_to_google_sheets(data)

            messages.success(request, "‚úÖ –î–µ—Ñ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            if inspection.container_status == "damaged":
                admins_and_masters = CustomUser.objects.filter(role__in=["admin", "master"])
                message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {inspection.container_number} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
                for user in admins_and_masters:
                    Notification.objects.create(recipient=user, message=message, defect=inspection)

            return redirect("/supplies/container_unloading_zone_sb/")

    else:
        form = ContainerUnloadingZoneSBInspectionForm()

    return render(request, "supplies/container_unloading_zone_sb.html", {
        "form": form,
    })


@login_required
@role_required(["controller", 'master'])
def component_unloading_zone_dkd(request):
    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    details = Detail.objects.filter(posts=post)
    defects = Defect.objects.filter(posts=post)
    defect_grades = DefectGrade.objects.all()
    defect_responsibles = DefectResponsible.objects.filter(posts=post)

    if request.method == "POST":
        print("DEBUG: request.POST =", request.POST)
        print("DEBUG: request.FILES =", request.FILES)

        form = ComponentUnloadingZoneDKDForm(request.POST, request.FILES, post_id=post_id)

        if form.is_valid():
            engine_number = form.cleaned_data.get("engine_number")
            if not engine_number:
                messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –î–í–° –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                return redirect(f"/supplies/dvs_unloading_zone_dkd/?post_id={post_id}")

            trace_data = TraceData.objects.filter(engine_number=engine_number).first()
            vin = trace_data.vin_rk if trace_data else None

            if not vin:
                messages.error(request, "‚ùå –û—à–∏–±–∫–∞: VIN RK –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –î–í–°.")
                return redirect(f"/supplies/dvs_unloading_zone_dkd/?post_id={post_id}")

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin)

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ—Ö–∞ –∏ –ø–æ—Å—Ç–∞
            zone = post.location
            post_name = post.name

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–∞ –î–í–°
            engine_photo_url = None
            if "engine_photo" in request.FILES:
                engine_file = request.FILES["engine_photo"]
                engine_file_path = f"images/engine_numbers/{engine_file.name}"
                os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/engine_numbers"), exist_ok=True)
                with open(os.path.join(settings.MEDIA_ROOT, engine_file_path), "wb+") as destination:
                    for chunk in engine_file.chunks():
                        destination.write(chunk)
                engine_photo_url = f"{settings.MEDIA_URL}{engine_file_path}"

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
            component_photo_urls = []
            component_photos = request.FILES.getlist("component_photos")

            if component_photos:
                for file in component_photos:
                    file_path = f"images/components/{file.name}"
                    os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/components"), exist_ok=True)
                    with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                        for chunk in file.chunks():
                            destination.write(chunk)
                    component_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

            # ‚úÖ –ï—Å–ª–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –æ—Å–º–æ—Ç—Ä
            has_defect = request.POST.get("has_defect", "")

            if has_defect == "no":
                inspection_data = {
                    "engine_number": engine_number,
                    "controller": request.user.username,
                    "defects": [],  # –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                    "engine_photo": engine_photo_url,
                    "component_photos": component_photo_urls,
                    "date_added": now_almaty_iso(),
                }

                if zone not in history_entry.history:
                    history_entry.history[zone] = {}

                if post_name not in history_entry.history[zone]:
                    history_entry.history[zone][post_name] = []

                history_entry.history[zone][post_name].append(inspection_data)
                history_entry.save()

                messages.success(request, "‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                return redirect(f"/supplies/dvs_unloading_zone_dkd/?post_id={post_id}")

            # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
            defect_index = 1
            while f"responsible_{defect_index}" in request.POST:
                responsible_obj = DefectResponsible.objects.filter(id=request.POST.get(f"responsible_{defect_index}")).first()
                detail_obj = Detail.objects.filter(id=request.POST.get(f"detail_{defect_index}")).first()
                defect_obj = Defect.objects.filter(id=request.POST.get(f"defect_{defect_index}")).first()
                grade_obj = DefectGrade.objects.filter(id=request.POST.get(f"grade_{defect_index}")).first()

                repair_type_value = request.POST.get(f"repair_type_{defect_index}")

                defect_data = {
                    "responsible": responsible_obj.name if responsible_obj else None,
                    "detail": detail_obj.name if detail_obj else None,
                    "defect": defect_obj.name if defect_obj else None,
                    "custom_defect_explanation": request.POST.get(f"custom_defect_explanation_{defect_index}"),
                    "quantity": request.POST.get(f"quantity_{defect_index}", 1),
                    "grade": grade_obj.name if grade_obj else None,
                    "repair_type": repair_type_value,  # ‚úÖ –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä
                    "defect_photos": [],
                }

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                defect_photo_urls = []
                defect_images = request.FILES.getlist(f"defect_photos_{defect_index}")
                if defect_images:
                    for file in defect_images:
                        file_path = f"images/defects/{file.name}"
                        os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/defects"), exist_ok=True)
                        with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                            for chunk in file.chunks():
                                destination.write(chunk)
                        defect_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

                defect_data["defect_photos"] = defect_photo_urls

                # ‚úÖ –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π inspection_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞
                inspection_data = {
                    "engine_number": engine_number,
                    "controller": request.user.username,
                    "defects": [defect_data],
                    "engine_photo": engine_photo_url,
                    "component_photos": component_photo_urls,
                    "date_added": now_almaty_iso(),
                }

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-–∏—Å—Ç–æ—Ä–∏—é
                if zone not in history_entry.history:
                    history_entry.history[zone] = {}

                if post_name not in history_entry.history[zone]:
                    history_entry.history[zone][post_name] = []

                history_entry.history[zone][post_name].append(inspection_data)
                defect_index += 1

            history_entry.save()

            messages.success(request, "‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return redirect(f"/supplies/dvs_unloading_zone_dkd/?post_id={post_id}")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            print("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:", form.errors)

    else:
        form = ComponentUnloadingZoneDKDForm(post_id=post_id)

    return render(request, "supplies/component_unloading_zone_dkd.html", {
        "form": form,
        "details": details,
        "defects": defects,
        "defect_grades": defect_grades,
        "defect_responsibles": defect_responsibles,
        "post_id": post_id,
        "post": post,
    })


@login_required
@role_required(["controller", 'master'])
def body_unloading_zone_dkd(request):
    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    details = BodyDetail.objects.filter(posts=post)
    defects = Defect.objects.filter(posts=post)
    defect_grades = DefectGrade.objects.all()
    defect_responsibles = DefectResponsible.objects.filter(posts=post)

    if request.method == "POST":
        print("DEBUG: request.POST =", request.POST)
        print("DEBUG: request.FILES =", request.FILES)

        form = BodyUnloadingZoneDKDForm(request.POST, request.FILES, post_id=post_id)

        if form.is_valid():
            vin_number = form.cleaned_data.get("vin_number")
            container_number = form.cleaned_data.get("container_number", "").strip()
            if not vin_number:
                messages.error(request, "‚ùå –û—à–∏–±–∫–∞: VIN –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                return redirect(f"/supplies/body_unloading_zone_dkd/?post_id={post_id}")

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin_number)

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ—Ö–∞ –∏ –ø–æ—Å—Ç–∞
            zone = post.location
            post_name = post.name

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫—É–∑–æ–≤–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤)
            body_photo_urls = []
            body_photos = form.cleaned_data["body_photos"]
            if body_photos:
                for file in body_photos:
                    compressed_file = compress_uploaded_image(file)  # üîπ –°–∂–∞—Ç–∏–µ
                    file_path = f"images/body_photos/{compressed_file.name}"
                    os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/body_photos"), exist_ok=True)
                    with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                        for chunk in compressed_file.chunks():
                            destination.write(chunk)
                    body_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

            has_defect = request.POST.get("has_defect", "")

            if has_defect == "no":
                inspection_data = {
                    "vin_number": vin_number,
                    "controller": request.user.username,
                    "defects": [],  # üîπ –°—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç –¥–µ—Ñ–µ–∫—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    "body_photos": body_photo_urls,
                    "date_added": now_almaty_iso(),
                }

                if container_number:
                    inspection_data["container_number"] = container_number

                # ‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                duration_seconds = request.POST.get("inspection_duration_seconds")
                try:
                    inspection_data["inspection_duration_seconds"] = int(duration_seconds)
                except (ValueError, TypeError):
                    inspection_data["inspection_duration_seconds"] = None

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-–∏—Å—Ç–æ—Ä–∏—é
                if zone not in history_entry.history:
                    history_entry.history[zone] = {}

                if post_name not in history_entry.history[zone]:
                    history_entry.history[zone][post_name] = []

                history_entry.history[zone][post_name].append(inspection_data)

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é VIN
                history_entry.save()

                messages.success(request, "‚úÖ –û—Å–º–æ—Ç—Ä –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                return redirect(f"/supplies/body_unloading_zone_dkd/?post_id={post_id}")

            # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
            defect_index = 1
            while f"responsible_{defect_index}" in request.POST:
                responsible_obj = DefectResponsible.objects.filter(id=request.POST.get(f"responsible_{defect_index}")).first()
                detail_obj = BodyDetail.objects.filter(id=request.POST.get(f"detail_{defect_index}")).first()
                defect_obj = Defect.objects.filter(id=request.POST.get(f"defect_{defect_index}")).first()
                grade_obj = DefectGrade.objects.filter(id=request.POST.get(f"grade_{defect_index}")).first()
                detail_explanation = request.POST.get(f"custom_detail_explanation_{defect_index}", "")  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏
                defect_explanation = request.POST.get(f"custom_defect_explanation_{defect_index}")  # üÜï –±–µ—Ä—ë–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞

                defect_data = {
                    "responsible": responsible_obj.name if responsible_obj else None,
                    "detail": detail_obj.name if detail_obj else None,
                    "custom_detail_explanation": detail_explanation,  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏
                    "defect": defect_obj.name if defect_obj else None,
                    "custom_defect_explanation": defect_explanation,  # ‚úÖ –ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
                    "quantity": request.POST.get(f"quantity_{defect_index}", 1),
                    "grade": grade_obj.name if grade_obj else None,
                    "repair_type": request.POST.get(f"repair_type_{defect_index}"),  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏!
                    "defect_photos": [],
                }

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                defect_photo_urls = []
                defect_images = request.FILES.getlist(f"defect_photos_{defect_index}")  # üõ† –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
                if defect_images:
                    for file in defect_images:
                        compressed_file = compress_uploaded_image(file)  # üîπ –°–∂–∞—Ç–∏–µ
                        file_path = f"images/defects/{compressed_file.name}"
                        os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/defects"), exist_ok=True)
                        with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                            for chunk in compressed_file.chunks():
                                destination.write(chunk)
                        defect_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

                defect_data["defect_photos"] = defect_photo_urls

                # ‚úÖ –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π inspection_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞
                inspection_data = {
                    "vin_number": vin_number,
                    "controller": request.user.username,
                    "defects": [defect_data],
                    "body_photos": body_photo_urls,
                    "date_added": now_almaty_iso(),
                }
                # üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if container_number:
                    inspection_data["container_number"] = container_number

                # ‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞
                duration_seconds = request.POST.get("inspection_duration_seconds")
                try:
                    inspection_data["inspection_duration_seconds"] = int(duration_seconds)
                except (ValueError, TypeError):
                    inspection_data["inspection_duration_seconds"] = None

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-–∏—Å—Ç–æ—Ä–∏—é
                if zone not in history_entry.history:
                    history_entry.history[zone] = {}

                if post_name not in history_entry.history[zone]:
                    history_entry.history[zone][post_name] = []

                history_entry.history[zone][post_name].append(inspection_data)
                defect_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–µ—Ñ–µ–∫—Ç—É

            history_entry.save()

            messages.success(request, "‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return redirect(f"/supplies/body_unloading_zone_dkd/?post_id={post_id}")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            print("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:", form.errors)

    else:
        form = BodyUnloadingZoneDKDForm(post_id=post_id)

    return render(request, "supplies/body_unloading_zone_dkd.html", {
        "form": form,
        "details": details,
        "defects": defects,
        "defect_grades": defect_grades,
        "defect_responsibles": defect_responsibles,
        "post_id": post_id,
        "post": post,
    })


@login_required
@role_required(["controller", 'master'])
def main_unloading_zone_dkd(request):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–æ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º–∫–∏ DKD (–±–µ–∑ VIN-—Ñ–æ—Ç–æ, –Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ VIN)"""

    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    details = BodyDetail.objects.all()
    defects = Defect.objects.filter(posts=post)
    defect_grades = DefectGrade.objects.all()
    defect_responsibles = DefectResponsible.objects.filter(posts=post)

    vin_history = None  # –ò—Å—Ç–æ—Ä–∏—è VIN (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)

    if request.method == "POST":
        print("DEBUG: request.POST =", request.POST)
        print("DEBUG: request.FILES =", request.FILES)

        form = MainUnloadingZoneDKDForm(request.POST, request.FILES, post_id=post_id)

        if form.is_valid():
            vin_number = form.cleaned_data.get("vin_number")
            if not vin_number:
                messages.error(request, "‚ùå –û—à–∏–±–∫–∞: VIN –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                return redirect(f"/supplies/main_unloading_zone_dkd/?post_id={post_id}")

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin_number)

            zone = post.location
            post_name = post.name

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫—É–∑–æ–≤–∞
            body_photo_urls = []
            body_photos = form.cleaned_data["body_photos"]
            if body_photos:
                for file in body_photos:
                    compressed_file = compress_uploaded_image(file)  # üîπ –°–∂–∞—Ç–∏–µ
                    file_path = f"images/body_photos/{compressed_file.name}"
                    os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/body_photos"), exist_ok=True)
                    with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                        for chunk in compressed_file.chunks():
                            destination.write(chunk)
                    body_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

            # ‚úÖ –°–æ–∑–¥–∞—ë–º inspection_data —Å—Ä–∞–∑—É
            inspection_data = {
                "vin_number": vin_number,
                "controller": request.user.username,
                "defects": [],  # üîπ –°—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç –¥–µ—Ñ–µ–∫—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                "body_photos": body_photo_urls,
                "date_added": now_almaty_iso(),
            }

            # ‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            duration_seconds = request.POST.get("inspection_duration_seconds")
            try:
                inspection_data["inspection_duration_seconds"] = int(duration_seconds)
            except (ValueError, TypeError):
                inspection_data["inspection_duration_seconds"] = None

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–µ–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            defect_index = 1
            while f"responsible_{defect_index}" in request.POST:
                responsible_obj = DefectResponsible.objects.filter(id=request.POST.get(f"responsible_{defect_index}")).first()
                detail_obj = BodyDetail.objects.filter(id=request.POST.get(f"detail_{defect_index}")).first()
                defect_obj = Defect.objects.filter(id=request.POST.get(f"defect_{defect_index}")).first()
                grade_obj = DefectGrade.objects.filter(id=request.POST.get(f"grade_{defect_index}")).first()

                defect_data = {
                    "responsible": responsible_obj.name if responsible_obj else None,
                    "detail": detail_obj.name if detail_obj else None,
                    "custom_detail_explanation": request.POST.get(f"custom_detail_explanation_{defect_index}"),
                    "defect": defect_obj.name if defect_obj else None,
                    "custom_defect_explanation": request.POST.get(f"custom_defect_explanation_{defect_index}"),
                    "quantity": request.POST.get(f"quantity_{defect_index}", 1),
                    "grade": grade_obj.name if grade_obj else None,
                    "repair_type": request.POST.get(f"repair_type_{defect_index}"),
                    "defect_photos": [],
                }

                # –§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                defect_photo_urls = []
                defect_images = request.FILES.getlist(f"defect_photos_{defect_index}")
                if defect_images:
                    for file in defect_images:
                        compressed_file = compress_uploaded_image(file)  # üîπ –°–∂–∞—Ç–∏–µ
                        file_path = f"images/defects/{compressed_file.name}"
                        os.makedirs(os.path.join(settings.MEDIA_ROOT, "images/defects"), exist_ok=True)
                        with open(os.path.join(settings.MEDIA_ROOT, file_path), "wb+") as destination:
                            for chunk in compressed_file.chunks():
                                destination.write(chunk)
                        defect_photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

                defect_data["defect_photos"] = defect_photo_urls

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–µ–∫—Ç –≤ inspection_data
                inspection_data["defects"].append(defect_data)
                defect_index += 1

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º inspection_data –≤ –∏—Å—Ç–æ—Ä–∏—é
            if zone not in history_entry.history:
                history_entry.history[zone] = {}

            if post_name not in history_entry.history[zone]:
                history_entry.history[zone][post_name] = []

            history_entry.history[zone][post_name].append(inspection_data)
            history_entry.save()

            messages.success(request, "‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return redirect(f"/supplies/main_unloading_zone_dkd/?post_id={post_id}")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            print("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:", form.errors)

    else:
        form = MainUnloadingZoneDKDForm(post_id=post_id)

    return render(request, "supplies/main_unloading_zone_dkd.html", {
        "form": form,
        "details": details,
        "defects": defects,
        "defect_grades": defect_grades,
        "defect_responsibles": defect_responsibles,
        "post_id": post_id,
        "post": post,
        "vin_history": vin_history,
    })


def get_body_details_by_zone(request):
    """
    API: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω–µ.
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: /assembly/api/body-details/?zone=left
    """
    zone = request.GET.get("zone")

    if not zone:
        return JsonResponse({"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä 'zone' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."}, status=400)

    # –í—ã–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–π –∑–æ–Ω—ã + "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ" –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü—Ä–æ—á–µ–µ)
    details = BodyDetail.objects.filter(Q(zone=zone) | Q(zone="all"))

    results = [{"id": detail.id, "name": detail.name} for detail in details]
    return JsonResponse({"details": results})

@login_required
@role_required(["controller", 'master'])
def container_inspection_dkd(request):
    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    if request.method == "POST":
        form = ContainerInspectionForm(request.POST, request.FILES)

        if form.is_valid():
            container_number = form.cleaned_data["container_number"]
            description = form.cleaned_data["description"]
            has_defect = form.cleaned_data["has_defect"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            photo_urls = []
            photos = request.FILES.getlist("container_photos")
            if photos:
                for file in photos:
                    folder_path = os.path.join(settings.MEDIA_ROOT, "images/containers")
                    os.makedirs(folder_path, exist_ok=True)

                    file_path = f"images/containers/{file.name}"
                    full_path = os.path.join(settings.MEDIA_ROOT, file_path)
                    with open(full_path, "wb+") as destination:
                        for chunk in file.chunks():
                            destination.write(chunk)

                    photo_urls.append(f"{settings.MEDIA_URL}{file_path}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            container_obj, _ = ContainerHistory.objects.get_or_create(container_number=container_number)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            container_obj.add_entry(
                post=post,
                controller_username=request.user.username,
                has_defect=has_defect,
                description=description,
                photos=photo_urls,
                date_added=now_almaty_iso(),  # ‚è±Ô∏è –ë–µ—Ä–µ–º –≤—Ä–µ–º—è –∏–∑ utils
            )

            messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            return redirect(f"/supplies/container_inspection_dkd/?post_id={post_id}")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è!")
    else:
        form = ContainerInspectionForm()

    return render(request, "supplies/container_inspection_dkd.html", {
        "form": form,
        "post_id": post_id,
        "post": post,
    })


def search_container(request):
    query = request.GET.get("q", "").strip()

    if not query:
        return JsonResponse({"results": []})

    containers = (
        ContainerHistory.objects
        .filter(container_number__icontains=query)
        .values_list("container_number", flat=True)
        .distinct()[:10]
    )

    return JsonResponse({"results": list(containers)})


@login_required
@role_required(["controller", "master"])
def trash(request):
    post_id = request.GET.get("post_id")
    post = get_object_or_404(Post, id=post_id)

    if request.method == "POST":
        vin_code = (request.POST.get("vin_code") or "").strip().upper()
        # –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –∏–º–µ–Ω–∏ –∏–∑ —Ñ–æ—Ä–º—ã: comment –ò–õ–ò description
        comment = (request.POST.get("comment") or request.POST.get("description") or "").strip()

        if not vin_code:
            messages.error(request, "‚ùå –£–∫–∞–∂–∏—Ç–µ VIN-–∫–æ–¥.")
            return redirect(f"{reverse('trash')}?post_id={post_id}")

        # üì∏ –§–æ—Ç–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—è ‚Äî trash_photos –∏ container_photos
        files = request.FILES.getlist("trash_photos") or request.FILES.getlist("container_photos")
        photo_urls = []
        if files:
            folder_rel = "images/trash"
            folder_abs = os.path.join(settings.MEDIA_ROOT, folder_rel)
            os.makedirs(folder_abs, exist_ok=True)

            for f in files:
                _, ext = os.path.splitext(f.name)
                safe_ext = ext.lower() if ext else ".jpg"
                filename = f"photo_{uuid.uuid4().hex}{safe_ext}"
                rel_path = os.path.join(folder_rel, filename)
                abs_path = os.path.join(settings.MEDIA_ROOT, rel_path)

                with open(abs_path, "wb+") as dst:
                    for chunk in f.chunks():
                        dst.write(chunk)

                photo_urls.append(f"{settings.MEDIA_URL}{rel_path}")

        # üÜî –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º VIN
        bucket, _ = ContainerHistory.objects.get_or_create(container_number=vin_code)

        # –ü–∏—à–µ–º –∑–∞–ø–∏—Å—å –ë–ï–ó has_defect
        bucket.add_entry(
            post=post,
            controller_username=request.user.username,
            has_defect=None,                # –≤–∞–∂–Ω–æ: —Ç–æ–≥–¥–∞ –∫–ª—é—á –Ω–µ –ø–æ–ø–∞–¥—ë—Ç –≤ JSON
            description=comment,
            photos=photo_urls,
            date_added=now_almaty_iso(),
        )

        messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return redirect(f"{reverse('trash')}?post_id={post_id}")

    return render(request, "supplies/trash.html", {
        "post_id": post_id,
        "post": post,
    })
