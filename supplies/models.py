from django.db import models
from django.conf import settings
import os
from django.utils.timezone import now


class TraceData(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞"""
    brand = models.CharField(max_length=50, verbose_name="Brand", default="Unknown")
    model = models.CharField(max_length=50, verbose_name="Model", default="Unknown")
    config_code = models.CharField(max_length=50, verbose_name="Configuration Code")
    body_number = models.CharField(max_length=50, verbose_name="Body Number")
    vin_rk = models.CharField(max_length=50, unique=True, verbose_name="VIN RK")
    vin_c = models.CharField(max_length=50, verbose_name="VIN C")
    engine_number = models.CharField(max_length=50, verbose_name="Engine Number")
    engine_volume = models.IntegerField(verbose_name="Engine Volume")
    modification = models.CharField(max_length=50, verbose_name="Modification")
    body_color = models.CharField(max_length=50, verbose_name="Body Color")
    transmission = models.CharField(max_length=50, verbose_name="Transmission")
    engine_power = models.CharField(max_length=50, verbose_name="Engine Power (hp/kW)")
    gross_weight = models.IntegerField(verbose_name="Gross Weight")
    weight = models.IntegerField(verbose_name="Weight")
    config_code_extra = models.CharField(max_length=50, verbose_name="Additional Configuration Code")
    color_1c = models.CharField(max_length=50, verbose_name="Color in 1C")
    body_type = models.CharField(max_length=50, verbose_name="Body Type")
    seat_capacity = models.IntegerField(verbose_name="Seating Capacity")
    production_year = models.IntegerField(verbose_name="Production Year")

    # üîπ –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    interior_color = models.CharField(
        max_length=50,
        verbose_name="Interior Color",
        blank=True,
        null=True
    )

    # üîπ –ù–æ–≤—ã–µ –ø–æ–ª—è
    tdmm_front_axle = models.IntegerField(
        verbose_name="–¢–î–ú–ú –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é—é –æ—Å—å (–∫–≥)",
        blank=True,
        null=True
    )
    tdmm_rear_axle = models.IntegerField(
        verbose_name="–¢–î–ú–ú –Ω–∞ –∑–∞–¥–Ω—é—é –æ—Å—å (–∫–≥)",
        blank=True,
        null=True
    )
    butch_number = models.CharField(
        max_length=100,
        verbose_name="–ù–æ–º–µ—Ä –±–∞—Ç—á–∞",
        blank=True,
        null=True
    )

    date_added = models.DateTimeField(default=now, verbose_name="Date Added")

    class Meta:
        verbose_name = "Trace Data"
        verbose_name_plural = "Trace Data"

    def __str__(self):
        return f"VIN: {self.vin_rk} - Engine: {self.engine_number}"



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
def container_image_path(instance, filename):
    return os.path.join("images/containers", f"container_{instance.id}_{filename}")


def pallet_image_path(instance, filename):
    return os.path.join("images/pallets", f"pallet_{instance.id}_{filename}")


def defect_image_path(instance, filename):
    return os.path.join("images/defects", f"defect_{instance.id}_{filename}")


class Post(models.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞"""
    name = models.CharField(max_length=100, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    location = models.CharField(max_length=200, blank=True, null=True, verbose_name="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ü–æ—Å—Ç"
        verbose_name_plural = "–ü–æ—Å—Ç—ã"


class Detail(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"""
    name = models.CharField(max_length=255, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏")
    posts = models.ManyToManyField(Post, related_name="details", verbose_name="–ü–æ—Å—Ç—ã")  # ‚úÖ –°–≤—è–∑—å —Å –Ω–æ–≤—ã–º Post

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–î–µ—Ç–∞–ª—å"
        verbose_name_plural = "–î–µ—Ç–∞–ª–∏"


class Defect(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    name = models.CharField(max_length=255, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞")
    posts = models.ManyToManyField(Post, related_name="defects", verbose_name="–ü–æ—Å—Ç—ã")  # ‚úÖ –°–≤—è–∑—å —Å –Ω–æ–≤—ã–º Post

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–î–µ—Ñ–µ–∫—Ç"
        verbose_name_plural = "–î–µ—Ñ–µ–∫—Ç—ã"


class DefectGrade(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–µ–π–¥–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    name = models.CharField(max_length=50, unique=True, verbose_name="–ì—Ä–µ–π–¥ –¥–µ—Ñ–µ–∫—Ç–∞")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–µ–π–¥–∞")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ì—Ä–µ–π–¥ –¥–µ—Ñ–µ–∫—Ç–∞"
        verbose_name_plural = "–ì—Ä–µ–π–¥—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤"


class DefectResponsible(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –¥–µ—Ñ–µ–∫—Ç—ã"""
    name = models.CharField(max_length=100, unique=True, verbose_name="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –¥–µ—Ñ–µ–∫—Ç")
    department = models.CharField(max_length=100, blank=True, null=True, verbose_name="–¶–µ—Ö / –û—Ç–¥–µ–ª")
    posts = models.ManyToManyField(Post, related_name="defect_responsibles", verbose_name="–ü–æ—Å—Ç—ã")  # ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ—Å—Ç—É

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –¥–µ—Ñ–µ–∫—Ç"
        verbose_name_plural = "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –¥–µ—Ñ–µ–∫—Ç—ã"


class ContainerUnloadingZone2Inspection(models.Model):
    """–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —ç—Ç–∞–∂ 2 (–º–æ–¥–µ–ª—å –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤)"""
    post = models.ForeignKey(Post, on_delete=models.CASCADE, verbose_name="–ü–æ—Å—Ç")
    controller = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name="–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")

    container_number = models.CharField(max_length=20, verbose_name="–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    pallet_number = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –ø–∞–ª–µ—Ç–∞")

    detail = models.ForeignKey(Detail, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–î–µ—Ç–∞–ª—å")
    defect = models.ForeignKey(Defect, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–î–µ—Ñ–µ–∫—Ç")

    defect_description = models.CharField(max_length=100, blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞")

    container_image = models.ImageField(
        upload_to="images/containers/",
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    )

    pallet_image = models.ImageField(
        upload_to="images/pallets/",
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –ø–∞–ª–µ—Ç–∞"
    )

    defect_images = models.TextField(
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ (—Å–ø–∏—Å–æ–∫ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏")

    def __str__(self):
        return f"–î–µ—Ñ–µ–∫—Ç –Ω–∞ {self.post.name} ({self.container_number})"

    def get_defect_images(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        return self.defect_images.split(", ") if self.defect_images else []

    def add_defect_image(self, image_url):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ–ª—é defect_images"""
        images = self.get_defect_images()
        images.append(image_url)
        self.defect_images = ", ".join(images)
        self.save()

    class Meta:
        verbose_name = "–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —ç—Ç–∞–∂ 2 (–ò–Ω—Å–ø–µ–∫—Ü–∏—è)"
        verbose_name_plural = "–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —ç—Ç–∞–∂ 2 (–ò–Ω—Å–ø–µ–∫—Ü–∏–∏)"


class ContainerUnloadingZoneSBInspection(models.Model):
    """–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ SB (–∏–Ω—Å–ø–µ–∫—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)"""

    post = models.ForeignKey(Post, on_delete=models.CASCADE, verbose_name="–ü–æ—Å—Ç")
    controller = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"
    )

    container_number = models.CharField(max_length=20, verbose_name="–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")

    container_images = models.TextField(
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Å–ø–∏—Å–æ–∫ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
    )

    container_number_image = models.ImageField(
        upload_to="images/container_numbers/",
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    )

    container_description = models.CharField(
        max_length=100, blank=True, null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    )

    seal_image = models.ImageField(
        upload_to="images/container_seals/",
        blank=True, null=True,
        verbose_name="–§–æ—Ç–æ –ø–ª–æ–º–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    )

    seal_description = models.CharField(
        max_length=100, blank=True, null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–æ–º–±—ã"
    )

    CONTAINER_STATUS_CHOICES = [
        ('damaged', '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'),
        ('not_damaged', '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω')
    ]

    container_status = models.CharField(
        max_length=20, choices=CONTAINER_STATUS_CHOICES,
        verbose_name="–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏")

    def __str__(self):
        return f"–ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {self.container_number}"

    def get_container_images(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        return self.container_images.split(", ") if self.container_images else []

    def add_container_image(self, image_url):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ–ª—é container_images"""
        images = self.get_container_images()
        images.append(image_url)
        self.container_images = ", ".join(images)
        self.save()

    class Meta:
        verbose_name = "–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ SB (–ò–Ω—Å–ø–µ–∫—Ü–∏—è)"
        verbose_name_plural = "–ó–æ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ SB (–ò–Ω—Å–ø–µ–∫—Ü–∏–∏)"


class BodyDetail(models.Model):
    """–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞ –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã"""

    ZONE_CHOICES = [
        # –≠–∫—Å—Ç–µ—Ä—å–µ—Ä
        ("left", "–õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞"),
        ("right", "–ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞"),
        ("front", "–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å"),
        ("back", "–ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å"),
        ("up", "–í–µ—Ä—Ö"),
        ("all", "–í—Å–µ –∑–æ–Ω—ã (–ü—Ä–æ—á–µ–µ)"),

        # –ò–Ω—Ç–µ—Ä—å–µ—Ä (–Ω–æ–≤—ã–µ)
        ("mult", "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞"),
        ("salon", "–°–∞–ª–æ–Ω"),
        ("fd_right", "–î–≤–µ—Ä—å –ø–µ—Ä–µ–¥–Ω—è—è –ø—Ä–∞–≤–∞—è"),
        ("fd_left", "–î–≤–µ—Ä—å –ø–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è"),
        ("bd_right", "–î–≤–µ—Ä—å –∑–∞–¥–Ω—è—è –ø—Ä–∞–≤–∞—è"),
        ("bd_left", "–î–≤–µ—Ä—å –∑–∞–¥–Ω—è—è –ª–µ–≤–∞—è"),
    ]

    name = models.CharField(max_length=255, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏")
    zone = models.CharField(
        max_length=20,  # üî• —É–≤–µ–ª–∏—á–∏–ª —Å 10 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –≤–ª–µ–∑–ª–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ "fd_right"
        choices=ZONE_CHOICES,
        verbose_name="–ß–∞—Å—Ç—å –∫—É–∑–æ–≤–∞/–∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"
    )
    posts = models.ManyToManyField(
        "Post",
        related_name="body_details",
        verbose_name="–ü–æ—Å—Ç—ã"
    )

    def str(self):
        return f"{self.name} ({self.get_zone_display()})"

    class Meta:
        verbose_name = "–î–µ—Ç–∞–ª—å –∫—É–∑–æ–≤–∞/–∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"
        verbose_name_plural = "–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞ –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"
