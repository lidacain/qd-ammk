from django import forms
from .models import CustomUser, Selection, Employee
from django.core.exceptions import ValidationError
from django.contrib.auth.password_validation import validate_password
from django.contrib.auth.forms import PasswordChangeForm
from datetime import timedelta, date
from PIL import Image
from io import BytesIO
from django.core.files.base import ContentFile
from assembly.models import AssemblyZone, AssemblyUnit, AssemblyDefect


class ControllerCreationForm(forms.ModelForm):
    password = forms.CharField(
        label="–ü–∞—Ä–æ–ª—å",
        widget=forms.PasswordInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"})
    )
    password2 = forms.CharField(
        label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
        widget=forms.PasswordInput(attrs={"placeholder": "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"})
    )
    username = forms.CharField(
        label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        widget=forms.TextInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"})
    )
    first_name = forms.CharField(
        label="–ò–º—è",
        widget=forms.TextInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è"})
    )
    last_name = forms.CharField(
        label="–§–∞–º–∏–ª–∏—è",
        widget=forms.TextInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"})
    )
    patronymic = forms.CharField(
        label="–û—Ç—á–µ—Å—Ç–≤–æ",
        required=False,
        widget=forms.TextInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"})
    )
    email = forms.EmailField(
        label="Email",
        required=False,
        widget=forms.EmailInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"})
    )

    class Meta:
        model = CustomUser
        fields = ['username', 'password', 'password2', 'first_name', 'last_name', 'patronymic', 'email']


    def clean(self):
        cleaned_data = super().clean()
        p1 = cleaned_data.get("password")
        p2 = cleaned_data.get("password2")

        if p1 and p2 and p1 != p2:
            raise ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")

        try:
            validate_password(p1)
        except ValidationError as e:
            raise ValidationError(e.messages)

        return cleaned_data

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        user.role = 'controller'
        if commit:
            user.save()
        return user


class ControllerPasswordChangeForm(forms.Form):
    new_password = forms.CharField(
        label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
        widget=forms.PasswordInput(attrs={"placeholder": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", "class": "form-control"})
    )
    password2 = forms.CharField(
        label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
        widget=forms.PasswordInput(attrs={"placeholder": "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", "class": "form-control"})
    )

    def clean(self):
        cleaned_data = super().clean()
        p1 = cleaned_data.get("new_password")
        p2 = cleaned_data.get("password2")

        if p1 and p2 and p1 != p2:
            raise ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")

        try:
            validate_password(p1)
        except ValidationError as e:
            raise ValidationError(e.messages)

        return cleaned_data


class ControllerEditForm(forms.ModelForm):
    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'last_name', 'patronymic', 'email', 'position', 'avatar']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control'}),
            'patronymic': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'position': forms.TextInput(attrs={'class': 'form-control'}),  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
            'avatar': forms.FileInput(attrs={'class': 'form-control'}),
        }


class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = CustomUser
        fields = ['first_name', 'last_name', 'patronymic', 'email', 'position', 'avatar']
        widgets = {
            'first_name': forms.TextInput(attrs={'class': 'form-control form-control-lg'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control form-control-lg'}),
            'patronymic': forms.TextInput(attrs={'class': 'form-control form-control-lg'}),
            'email': forms.EmailInput(attrs={'class': 'form-control form-control-lg'}),
            'position': forms.TextInput(attrs={
                'class': 'form-control form-control-lg',
                'placeholder': '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å'
            }),
        }

    def clean_avatar(self):
        avatar = self.cleaned_data.get('avatar')
        if avatar:
            try:
                image = Image.open(avatar)
                image = image.convert('RGB')  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ RGB (–Ω–∞ —Å–ª—É—á–∞–π PNG –∏ –¥—Ä.)

                width, height = image.size
                min_side = min(width, height)

                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–µ–∑–∫–∏
                left = (width - min_side) // 2
                top = (height - min_side) // 2
                right = left + min_side
                bottom = top + min_side

                image = image.crop((left, top, right, bottom))
                image = image.resize((400, 400))  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä

                buffer = BytesIO()
                image.save(buffer, format='JPEG', quality=90)
                return ContentFile(buffer.getvalue(), name=avatar.name)

            except Exception as e:
                raise forms.ValidationError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return avatar


class CustomPasswordChangeForm(PasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['old_password'].widget.attrs.update({
            'class': 'form-control form-control-lg',
            'id': 'old_password'
        })
        self.fields['new_password1'].widget.attrs.update({
            'class': 'form-control form-control-lg',
            'id': 'new_password1'
        })
        self.fields['new_password2'].widget.attrs.update({
            'class': 'form-control form-control-lg',
            'id': 'new_password2'
        })


class EmployeeSearchForm(forms.Form):
    search_query = forms.CharField(
        label='–ü–æ–∏—Å–∫ –ø–æ –§–ò–û',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
        })
    )
    position = forms.CharField(
        label='–î–æ–ª–∂–Ω–æ—Å—Ç—å',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å'
        })
    )
    department = forms.CharField(
        label='–û—Ç–¥–µ–ª / –≥—Ä—É–ø–ø–∞',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª / –≥—Ä—É–ø–ø—É'
        })
    )


class EmployeeSelectionForm(forms.Form):
    TIME_CHOICES = [
        (f"{h:02d}:{m:02d}", f"{h:02d}:{m:02d}")
        for h in range(7, 21)
        for m in (0, 30)
    ]

    employees = forms.ModelMultipleChoiceField(
        queryset=Employee.objects.none(),  # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        label="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
        widget=forms.SelectMultiple(attrs={
            'class': 'form-select select2',
            'multiple': 'multiple',
            'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
        })
    )

    selected_dates = forms.CharField(
        label="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã",
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'id': 'date-picker',
            'placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É(—ã)'
        })
    )

    start_time = forms.ChoiceField(
        label="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
        choices=TIME_CHOICES,
        widget=forms.Select(attrs={'class': 'form-select'})
    )

    end_time = forms.ChoiceField(
        label="–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
        choices=TIME_CHOICES,
        widget=forms.Select(attrs={'class': 'form-select'})
    )

    is_xtk = forms.BooleanField(
        label="–•–¢–ö",
        required=False,
        widget=forms.CheckboxInput(attrs={'class': 'form-check-input'})
    )

    justification = forms.CharField(
        label="–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
        required=True,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'placeholder': '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç—Ç–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
            'rows': 2
        })
    )

    def __init__(self, *args, **kwargs):
        selected_ids = []
        if 'data' in kwargs:
            selected_ids = kwargs['data'].getlist('employees')
        elif 'initial' in kwargs:
            selected_ids = kwargs['initial'].get('employees', [])

        super().__init__(*args, **kwargs)
        if selected_ids:
            self.fields['employees'].queryset = Employee.objects.filter(id__in=selected_ids)
        else:
            self.fields['employees'].queryset = Employee.objects.all()

    def clean_selected_dates(self):
        dates_str = self.cleaned_data['selected_dates']
        date_list = [s.strip() for s in dates_str.split(',') if s.strip()]
        if not date_list:
            raise forms.ValidationError("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É")
        return date_list

    def clean(self):
        cleaned_data = super().clean()
        start = cleaned_data.get("start_time")
        end = cleaned_data.get("end_time")
        if start and end and start[-2:] != end[-2:]:
            raise forms.ValidationError("–ù–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–±–æ –æ–±–∞ —Å :00, –ª–∏–±–æ –æ–±–∞ —Å :30")
        return cleaned_data


class AssemblyZoneForm(forms.ModelForm):
    class Meta:
        model = AssemblyZone
        fields = ['name']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control form-control-sm'}),
        }


class AssemblyUnitForm(forms.ModelForm):
    class Meta:
        model = AssemblyUnit
        fields = ['name', 'zone']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control form-control-sm'}),
            'zone': forms.Select(attrs={'class': 'form-select form-select-sm'}),
        }


class AssemblyDefectForm(forms.ModelForm):
    class Meta:
        model = AssemblyDefect
        fields = ['name', 'nameENG']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control form-control-sm'}),
            'nameENG': forms.TextInput(attrs={'class': 'form-control form-control-sm'}),
        }