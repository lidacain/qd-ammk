from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse, HttpResponseNotFound
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from django.utils.timezone import now
import os
from collections import Counter
from supplies.models import TraceData
from .models import AssemblyPart, DefectAssembly, PostAssembly, AssemblyDefect, AssemblyUnit, AssemblyDefectGrade, AssemblyDefectResponsible, AssemblyZone
from .forms import (TorqueControlForm, TorqueGraphForm, AssemblyTemplateForm)
from users.decorators import role_required
from vehicle_history.models import VINHistory, AssemblyPassLog, VESPassLog, TrimOutPassLog, VehicleIdentifiers  # ‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ VIN
import json
from django.utils.dateparse import parse_datetime
from datetime import datetime
from uuid import uuid4
from .forms import TorqueControlForm, UUDDKDForm, UUDCheckForm
from django.views.decorators.csrf import csrf_exempt
from vehicle_history.utils import now_almaty_iso
from django.views.decorators.http import require_GET
from PIL import Image, ImageOps
from io import BytesIO
import sys
import time
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.core.serializers.json import DjangoJSONEncoder
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse, HttpResponseNotFound
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from django.utils.timezone import now
import os
from collections import Counter
from supplies.models import TraceData
from .models import AssemblyPart, DefectAssembly, PostAssembly, AssemblyDefect, AssemblyUnit, AssemblyDefectGrade, AssemblyDefectResponsible, AssemblyZone
from .forms import (TorqueControlForm, TorqueGraphForm, AssemblyTemplateForm)
from users.decorators import role_required
from vehicle_history.models import VINHistory  # ‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ VIN
import json
from django.utils.dateparse import parse_datetime
from datetime import datetime
from uuid import uuid4
from .forms import TorqueControlForm, UUDDKDForm, UUDCheckForm
from django.views.decorators.csrf import csrf_exempt
from vehicle_history.utils import now_almaty_iso
from django.views.decorators.http import require_GET
from PIL import Image, ImageOps
from io import BytesIO
import sys
import time
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.core.serializers.json import DjangoJSONEncoder
from django.views.decorators.http import require_POST

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.db import transaction
from django.shortcuts import get_object_or_404
from django.utils.timezone import now as dj_now
import uuid
from django.core.files.storage import default_storage
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse, HttpResponseNotFound
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from django.utils.timezone import now
import os
from collections import Counter
from supplies.models import TraceData
from .models import AssemblyPart, DefectAssembly, PostAssembly, AssemblyDefect, AssemblyUnit, AssemblyDefectGrade, AssemblyDefectResponsible, AssemblyZone
from .forms import (TorqueControlForm, TorqueGraphForm, AssemblyTemplateForm)
from users.decorators import role_required
from vehicle_history.models import VINHistory, AssemblyPassLog, VESPassLog  # ‚úÖ –ò—Å—Ç–æ—Ä–∏—è VIN, —Å–∫–∞–Ω—ã VIN –∏ VES-–ª–æ–≥–∏
import json
from django.utils.dateparse import parse_datetime
from datetime import datetime
from uuid import uuid4
from .forms import TorqueControlForm, UUDDKDForm, UUDCheckForm
from django.views.decorators.csrf import csrf_exempt
from vehicle_history.utils import now_almaty_iso
from django.views.decorators.http import require_GET
from PIL import Image, ImageOps
from io import BytesIO
import sys
import time
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse, HttpResponseNotFound
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from django.utils.timezone import now
import os
from collections import Counter
from supplies.models import TraceData
from .models import AssemblyPart, DefectAssembly, PostAssembly, AssemblyDefect, AssemblyUnit, AssemblyDefectGrade, AssemblyDefectResponsible, AssemblyZone
from .forms import (TorqueControlForm, TorqueGraphForm, AssemblyTemplateForm)
from users.decorators import role_required
from vehicle_history.models import VINHistory  # ‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ VIN
import json
from django.utils.dateparse import parse_datetime
from datetime import datetime
from uuid import uuid4
from .forms import TorqueControlForm, UUDDKDForm, UUDCheckForm
from django.views.decorators.csrf import csrf_exempt
from vehicle_history.utils import now_almaty_iso
from django.views.decorators.http import require_GET
from PIL import Image, ImageOps
from io import BytesIO
import sys
import time
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.core.serializers.json import DjangoJSONEncoder
from django.views.decorators.http import require_POST

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.db import transaction
from django.shortcuts import get_object_or_404
from django.utils.timezone import now as dj_now
import uuid
from django.core.files.storage import default_storage
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse, HttpResponseNotFound
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.conf import settings
from django.utils.timezone import now
import os
from collections import Counter
from supplies.models import TraceData
from .models import AssemblyPart, DefectAssembly, PostAssembly, AssemblyDefect, AssemblyUnit, AssemblyDefectGrade, AssemblyDefectResponsible, AssemblyZone
from .forms import (TorqueControlForm, TorqueGraphForm, AssemblyTemplateForm)
from users.decorators import role_required
from vehicle_history.models import VINHistory  # ‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ VIN
import json
from django.utils.dateparse import parse_datetime
from datetime import datetime
from uuid import uuid4
from .forms import TorqueControlForm, UUDDKDForm, UUDCheckForm
from django.views.decorators.csrf import csrf_exempt
from vehicle_history.utils import now_almaty_iso
from django.views.decorators.http import require_GET
from PIL import Image, ImageOps
from io import BytesIO
import sys
import time
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.core.serializers.json import DjangoJSONEncoder
from django.views.decorators.http import require_POST

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.db import transaction
from django.shortcuts import get_object_or_404
from django.utils.timezone import now as dj_now
import uuid
from django.core.files.storage import default_storage
import io, json, os
from datetime import datetime
from typing import Dict, Any, List, Tuple

from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse, HttpResponseBadRequest
from django.views.decorators.http import require_POST
from collections import OrderedDict
from PIL import Image
import xlsxwriter
from django.utils import timezone
from django.contrib.auth.decorators import permission_required


def compress_uploaded_image(uploaded_file, quality=60, max_width=1600):
    try:
        # üõ†Ô∏è –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å –≤ –Ω–∞—á–∞–ª–æ
        uploaded_file.seek(0)

        # ‚úÖ –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ InMemoryUploadedFile, –æ–±–µ—Ä–Ω—É—Ç—ã–π —Ä–∞–Ω–µ–µ, –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        image = Image.open(uploaded_file)
        image = ImageOps.exif_transpose(image)

        if image.mode in ("RGBA", "P"):
            image = image.convert("RGB")

        if image.width > max_width:
            ratio = max_width / float(image.width)
            height = int(float(image.height) * float(ratio))
            image = image.resize((max_width, height), Image.Resampling.LANCZOS)

        output_io = BytesIO()
        image.save(output_io, format="JPEG", quality=quality, optimize=True)
        output_io.seek(0)

        new_filename = f"photo_{now_almaty_iso().replace(':', '-').replace('T', '_')}.jpg"
        return InMemoryUploadedFile(
            output_io,
            'ImageField',
            new_filename,
            'image/jpeg',
            output_io.getbuffer().nbytes,
            None
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏:", e)
        return uploaded_file  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å


def save_check_photos(photos):
    saved_photos = []

    for photo in photos:
        filename = f"{now().strftime('%Y_%m_%d')}_{photo.name}"
        path = f"images/checks/{filename}"
        full_path = os.path.join(settings.MEDIA_ROOT, path)

        os.makedirs(os.path.dirname(full_path), exist_ok=True)

        with open(full_path, "wb+") as destination:
            for chunk in photo.chunks():
                destination.write(chunk)

        saved_photos.append(f"{settings.MEDIA_URL}{path}")

    return saved_photos


@login_required
@role_required(["master", "head_area"])
def torque_graph_view(request):
    form = TorqueGraphForm(request.GET or None)
    labels, data, chart_info = [], [], []
    min_torque = max_torque = 0
    seen_combinations = set()

    if form.is_valid():
        assembly_part = form.cleaned_data["assembly_part"]
        start_date = form.cleaned_data["start_date"]
        end_date = form.cleaned_data["end_date"]

        min_torque = assembly_part.min_torque
        max_torque = assembly_part.max_torque

        for history in VINHistory.objects.all():
            zone_data = history.history.get("–¶–µ—Ö —Å–±–æ—Ä–∫–∏", {})
            post_data = zone_data.get("–ü–æ—Å—Ç –º–æ–º–µ–Ω—Ç–∞ –∑–∞—Ç—è–∂–∫–∏, DKD", [])

            for entry in post_data:
                part_name = entry.get("assembly_part", "")
                vin = entry.get("vin_number", "")

                if part_name != str(assembly_part):
                    continue

                combination_key = (vin, part_name)
                if combination_key in seen_combinations:
                    continue
                seen_combinations.add(combination_key)

                timestamp = parse_datetime(entry.get("date_added"))
                if timestamp is None or not (start_date <= timestamp.date() <= end_date):
                    continue

                for torque in entry.get("torque_values", []):
                    labels.append(timestamp.strftime("%Y-%m-%d %H:%M:%S"))
                    data.append(torque)
                    chart_info.append({
                        "vin": vin,
                        "torque": torque,
                        "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S")
                    })

    has_data = bool(data)

    return render(request, "assembly/torque_graph_dkd.html", {
        "form": form,
        "labels": labels,
        "data": data,
        "chart_info": chart_info,
        "min_torque": min_torque,
        "max_torque": max_torque,
        "has_data": has_data,
    })


def vin_lookup(request):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ VIN.
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `q`, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ VIN'–æ–≤ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ).
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `vin`, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ VIN.
    """
    query = request.GET.get("q", "").strip().upper()
    vin_number = request.GET.get("vin", "").strip().upper()

    # üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (–¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
    if query:
        vins = TraceData.objects.filter(vin_rk__icontains=query)[:5]
        results = [
            {
                "vin": vin.vin_rk.strip(),
                "engine_number": vin.engine_number,
                "model": vin.model,
                "body_color": vin.body_color,
                "drive_type": vin.modification,
            }
            for vin in vins
        ]
        return JsonResponse({"results": results})

    # üìå –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ VIN (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)
    if vin_number:
        trace = TraceData.objects.filter(vin_rk=vin_number).first()
        if not trace:
            return JsonResponse({"error": "VIN –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

        data = {
            "vin": trace.vin_rk,
            "engine_number": trace.engine_number,
            "model": trace.model,
            "body_color": trace.body_color,
            "drive_type": trace.modification,
        }
        return JsonResponse(data)

    return JsonResponse({"error": "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `q` –∏–ª–∏ `vin`"}, status=400)


@login_required
@role_required(["controller"])
def torque_control_dkd(request):
    post = get_object_or_404(PostAssembly, name="–ü–æ—Å—Ç –º–æ–º–µ–Ω—Ç–∞ –∑–∞—Ç—è–∂–∫–∏, DKD")

    if request.method == "POST":
        form = TorqueControlForm(request.POST, request.FILES)

        if form.is_valid():
            vin = form.cleaned_data.get("vin_number")
            modification = form.cleaned_data.get("modification")
            assembly_part = str(form.cleaned_data.get("assembly_part"))
            torque_values = form.cleaned_data.get("torque_values")

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin)

            zone = "–¶–µ—Ö —Å–±–æ—Ä–∫–∏"
            post_name = "–ü–æ—Å—Ç –º–æ–º–µ–Ω—Ç–∞ –∑–∞—Ç—è–∂–∫–∏, DKD"

            if zone not in history_entry.history:
                history_entry.history[zone] = {}

            if post_name not in history_entry.history[zone]:
                history_entry.history[zone][post_name] = []

            has_defect = request.POST.get("has_defect")

            if has_defect == "no":
                inspection_data = {
                    "vin_number": vin,
                    "modification": modification,
                    "assembly_part": assembly_part,
                    "torque_values": torque_values,
                    "controller": request.user.username,
                    "defects": [],
                    "date_added": now_almaty_iso(),
                }
                history_entry.history[zone][post_name].append(inspection_data)

            else:
                index = 1
                while f"defect_type_{index}" in request.POST:
                    defect_type = request.POST.get(f"defect_type_{index}", "").strip()
                    defect_quantity = request.POST.get(f"defect_quantity_{index}", "1").strip()

                    if not defect_type:
                        index += 1
                        continue

                    defect_data = {
                        "type": defect_type,
                        "quantity": defect_quantity,
                        "photos": [],
                    }

                    defect_photos = request.FILES.getlist(f"defect_photo_{index}")
                    for photo in defect_photos:
                        path = f"images/defects/{photo.name}"
                        full_path = os.path.join(settings.MEDIA_ROOT, path)
                        os.makedirs(os.path.dirname(full_path), exist_ok=True)
                        with open(full_path, "wb+") as dest:
                            for chunk in photo.chunks():
                                dest.write(chunk)
                        defect_data["photos"].append(f"{settings.MEDIA_URL}{path}")

                    inspection_data = {
                        "vin_number": vin,
                        "modification": modification,
                        "assembly_part": assembly_part,
                        "torque_values": torque_values,
                        "controller": request.user.username,
                        "defects": [defect_data],
                        "date_added": now_almaty_iso(),
                    }

                    history_entry.history[zone][post_name].append(inspection_data)
                    index += 1

            history_entry.save()

            messages.success(request, "‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            return redirect("/assembly/torque_control_dkd/")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            print("‚ùå –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:", form.errors)

    else:
        form = TorqueControlForm()

    return render(request, "assembly/torque_control_dkd.html", {
        "form": form,
        "post": post,
    })


# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
def save_uploaded_file(file, folder):
    file_path = os.path.join(settings.MEDIA_ROOT, folder, file.name)
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    with open(file_path, "wb+") as destination:
        for chunk in file.chunks():
            destination.write(chunk)

    return f"{settings.MEDIA_URL}{folder}{file.name}"


def get_assembly_parts(request):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤/–¥–µ—Ç–∞–ª–µ–π.
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω `drive_type`, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–≤–æ–¥—É (2WD/4WD).
    - –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —É–∑–ª—ã/–¥–µ—Ç–∞–ª–∏.
    """
    drive_type = request.GET.get("drive_type", "").strip().upper()

    if drive_type in ["2WD", "4WD"]:
        parts = AssemblyPart.objects.filter(modification=drive_type)
    else:
        parts = AssemblyPart.objects.all()

    # üìå –¢–µ–ø–µ—Ä—å API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `modification` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
    results = [
        {
            "id": part.id,
            "name": part.name,
            "size": part.size,
            "modification": part.modification  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!
        }
        for part in parts
    ]
    return JsonResponse(results, safe=False)


def get_part_details(request):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–∞–ª–∏.
    """
    part_id = request.GET.get("part_id")

    if not part_id:
        return JsonResponse({"error": "–î–µ—Ç–∞–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"}, status=400)

    part = AssemblyPart.objects.filter(id=part_id).first()

    if not part:
        return JsonResponse({"error": "–î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=404)

    result = {
        "size": part.size,
        "min_quantity": part.min_quantity,
        "max_quantity": part.max_quantity,
        "min_torque": part.min_torque,
        "max_torque": part.max_torque
    }

    return JsonResponse(result)


def vin_defects_api(request):
    vin = request.GET.get("vin", "").strip().upper()

    if not vin:
        return JsonResponse({"error": "VIN –Ω–µ —É–∫–∞–∑–∞–Ω"}, status=400)

    defects = DefectAssembly.objects.filter(posts__name="–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞—Ç—è–∂–∫–∏ (DKD)")

    defect_counts = Counter(defect.name for defect in defects)

    results = [
        {
            "post": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞—Ç—è–∂–∫–∏ (DKD)",
            "defect_type": defect_name,
            "quantity": count,
            "defect_photos": []
        }
        for defect_name, count in defect_counts.items()
    ]

    return JsonResponse({"defects": results})


def view_image(request, image_path):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ –≤ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    full_image_path = os.path.join(settings.MEDIA_ROOT, image_path)
    if not os.path.exists(full_image_path):
        messages.error(request, "–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect("post_list")  # ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

    return render(request, "assembly/view_image.html", {"image_url": f"{settings.MEDIA_URL}{image_path}"})


@login_required
@role_required(["controller"])
def uud_dkd(request):
    post_id = request.GET.get("post_id")

    if not post_id:
        return HttpResponseNotFound("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω post_id –≤ URL")

    post = get_object_or_404(PostAssembly, id=post_id)

    if request.method == "POST":
        form = UUDDKDForm(request.POST, request.FILES)

        if form.is_valid():
            vin_number = form.cleaned_data.get("vin_number")
            repair_description = form.cleaned_data.get("repair_description")
            repair_photos = form.cleaned_data.get("repair_photos")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é VIN
            history_entry, _ = VINHistory.objects.get_or_create(vin=vin_number)

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            saved_photos = []
            for photo in repair_photos:
                path = f"images/repairs/{now().strftime('%Y_%m_%d')}_{photo.name}"
                full_path = os.path.join(settings.MEDIA_ROOT, path)
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                with open(full_path, "wb+") as dest:
                    for chunk in photo.chunks():
                        dest.write(chunk)
                saved_photos.append(f"{settings.MEDIA_URL}{path}")

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é VIN
            history_entry.add_entry(
                post=post,
                defects=[],
                extra_data={
                    "repair_description": repair_description,
                    "repair_photos": saved_photos,
                    "controller": request.user.username
                }
            )

            # ‚úÖ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
            from users.models import CustomUser, Notification

            message = f"–£–£–î –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–º–æ–Ω—Ç –ø–æ VIN {vin_number}. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."

            for user in CustomUser.objects.filter(role="master"):
                Notification.objects.create(
                    recipient=user,
                    message=message,
                    vin_number=vin_number
                )

            messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é VIN")
            return redirect(request.path + f"?post_id={post_id}")

        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            print(form.errors)

    else:
        form = UUDDKDForm()

    return render(request, "assembly/uud_dkd.html", {
        "form": form,
        "post": post,
    })


@login_required
@csrf_exempt
def offline_defects_api(request):
    vin = request.GET.get("vin")

    if not vin:
        return JsonResponse({"error": "VIN –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}, status=400)

    history_entry = VINHistory.objects.filter(vin=vin).first()

    if not history_entry:
        return JsonResponse({"error": "–ò—Å—Ç–æ—Ä–∏—è VIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=404)

    offline_defects = []

    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
    for zone, posts in history_entry.history.items():
        for post, inspections in posts.items():
            for inspection in inspections:
                for defect in inspection.get("defects", []):
                    if defect.get("repair_type") == "offline":
                        offline_defects.append({
                            "zone": zone,
                            "post": post,
                            "date": inspection.get("date_added"),
                            "detail": defect.get("detail"),
                            "defect": defect.get("defect"),
                            "grade": defect.get("grade"),
                            "quantity": defect.get("quantity"),
                            "responsible": defect.get("responsible"),
                            "repair_type": defect.get("repair_type"),
                            "repair_type_description": defect.get("repair_type_description"),
                            "photos": defect.get("defect_photos", [])
                        })

    return JsonResponse({"offline_defects": offline_defects}, status=200)


def save_check_photos(photos):
    saved_photos = []

    for photo in photos:
        filename = f"{now().strftime('%Y_%m_%d')}_{photo.name}"
        path = f"images/checks/{filename}"
        full_path = os.path.join(settings.MEDIA_ROOT, path)

        os.makedirs(os.path.dirname(full_path), exist_ok=True)

        with open(full_path, "wb+") as destination:
            for chunk in photo.chunks():
                destination.write(chunk)

        saved_photos.append(f"{settings.MEDIA_URL}{path}")

    return saved_photos


def get_last_uud_entry(history_entry):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ø–æ—Å—Ç–∞ '–£—á–∞—Å—Ç–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, DKD'
    –≤ –∑–æ–Ω–µ '–¶–µ—Ö –£–£–î' –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ VINHistory
    """
    zone_data = history_entry.history.get("–¶–µ—Ö –£–£–î", {})
    post_data = zone_data.get("–£—á–∞—Å—Ç–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, DKD", [])

    if post_data:
        return post_data[-1]  # –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
    return None


@login_required
@role_required(["controller"])
def uud_check_dkd(request):
    if request.method == "POST":
        form = UUDCheckForm(request.POST, request.FILES)

        if form.is_valid():
            vin_number = form.cleaned_data["vin_number"]
            check_status = form.cleaned_data["check_status"]
            comment = form.cleaned_data.get("comment", "")
            check_photos = form.cleaned_data.get("check_photos")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é VIN
            history_entry = VINHistory.objects.filter(vin=vin_number).first()
            if not history_entry:
                messages.error(request, "‚ùå –ò—Å—Ç–æ—Ä–∏—è VIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return redirect("uud_check_dkd")

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞ –£–£–î
            last_uud_entry = get_last_uud_entry(history_entry)
            if not last_uud_entry:
                messages.error(request, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞ –£–£–î –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ VIN.")
                return redirect("uud_check_dkd")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
            saved_photos = save_check_photos(check_photos) if check_status == "not_passed" else []

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ check_result
            last_uud_entry.setdefault("extra_data", {})["check_result"] = {
                "status": check_status,
                "checked_by": request.user.username,
                "comment": comment if check_status == "not_passed" else "",
                "checked_at": now().strftime("%Y-%m-%d %H:%M:%S"),
                "check_photos": saved_photos,
            }

            history_entry.save()
            messages.success(request, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            return redirect("assembly:uud_check_dkd")
        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    else:
        form = UUDCheckForm()

    return render(request, "assembly/uud_check_dkd.html", {"form": form})


@login_required
@require_GET
def uud_zone_data_api(request):
    vin = request.GET.get("vin")
    if not vin:
        return JsonResponse({"error": "VIN –Ω–µ —É–∫–∞–∑–∞–Ω."}, status=400)

    try:
        history_entry = VINHistory.objects.get(vin=vin)
    except VINHistory.DoesNotExist:
        return JsonResponse({"error": "–ò—Å—Ç–æ—Ä–∏—è VIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}, status=404)

    history = history_entry.history
    zone_data = history.get("–¶–µ—Ö –£–£–î", {})
    post_data = zone_data.get("–£—á–∞—Å—Ç–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, DKD", [])

    if not post_data:
        return JsonResponse({
            "uud_data": None
        })

    last_entry = post_data[-1]
    extra_data = last_entry.get("extra_data", {})

    check_result = extra_data.get("check_result", {})

    result = {
        "repair_description": extra_data.get("repair_description", ""),
        "repair_photos": extra_data.get("repair_photos", []),
        "date_added": last_entry.get("date_added", ""),
        "controller": extra_data.get("controller", ""),
        "check_status": check_result.get("status", ""),
        "checked_by": check_result.get("checked_by", ""),
        "checked_at": check_result.get("checked_at", ""),
        "check_comment": check_result.get("comment", ""),
        "check_photos": check_result.get("check_photos", []),
    }

    return JsonResponse({
        "uud_data": result
    })


def search_vin(request):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–∑–æ–≤–µ –ø–æ VIN.
    """
    query = request.GET.get("q", "").strip()
    if not query:
        return JsonResponse({"results": []})

    # –ü–æ–∏—Å–∫ –ø–æ VIN –≤ TraceData (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏)
    vins = TraceData.objects.filter(vin_rk__icontains=query)[:5]

    if not vins.exists():
        return JsonResponse({"results": [], "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É VIN"})

    results = [
        {
            "vin": vin.vin_rk,
            "engine_number": vin.engine_number,
            "config_code": vin.config_code,
            "model": vin.model,
            "body_color": vin.body_color,
            "drive_type": vin.modification,
        }
        for vin in vins
    ]

    return JsonResponse({"results": results})



@login_required
@role_required(["controller", "master", 'head_area'])
def assembly_post_view(request, line, post_suffix="", template_name="assembly/assembly_post_template.html"):
    post_id = request.GET.get("post_id")
    post_obj = PostAssembly.objects.filter(id=post_id).first()
    post_name = post_obj.name if post_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç"

    # üîΩ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    defects = AssemblyDefect.objects.all()
    zones = AssemblyZone.objects.all()
    units = AssemblyUnit.objects.all()
    grades = AssemblyDefectGrade.objects.all()
    responsibles = AssemblyDefectResponsible.objects.all()

    if request.method == "POST":
        form = AssemblyTemplateForm(request.POST, request.FILES)

        if form.is_valid():
            vin_number = form.cleaned_data.get("vin_number")
            has_defect = form.cleaned_data.get("has_defect", "")
            duration_seconds = request.POST.get("inspection_duration_seconds")

            if not vin_number:
                messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                return redirect(request.get_full_path())

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin_number)
            zone = "–¶–µ—Ö —Å–±–æ—Ä–∫–∏"

            inspection_data = {
                "vin_number": vin_number,
                "controller": request.user.username,
                "has_defect": has_defect,
                "defects": [],
                "date_added": now_almaty_iso(),
                "line": line.lower(),
            }

            try:
                inspection_data["inspection_duration_seconds"] = int(duration_seconds)
            except (ValueError, TypeError):
                inspection_data["inspection_duration_seconds"] = None

            if has_defect == "no":
                # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–º–æ—Ç—Ä –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                pass
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                defects_list = []
                defect_index = 1
                while f"defect_name_{defect_index}" in request.POST:
                    def_id = lambda field: request.POST.get(f"{field}_{defect_index}")
                    comment = request.POST.get(f"defect_comment_{defect_index}", "").strip()
                    repair_type = request.POST.get(f"defect_repair_type_{defect_index}", "").strip().lower()
                    if repair_type not in ["online", "offline"]:
                        repair_type = "online"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    try:
                        quantity = int(request.POST.get(f"defect_quantity_{defect_index}", "1"))
                    except ValueError:
                        quantity = 1
                    images = request.FILES.getlist(f"defect_photo_{defect_index}")
                    zone_name = request.POST.get(f"defect_zone_{defect_index}", "").strip()
                    photo_urls = []

                    for file in images:
                        try:
                            compressed = compress_uploaded_image(file)
                            filename = compressed.name
                            path = f"images/defects/{filename}"
                            full_path = os.path.join(settings.MEDIA_ROOT, path)
                            os.makedirs(os.path.dirname(full_path), exist_ok=True)
                            with open(full_path, "wb+") as destination:
                                for chunk in compressed.chunks():
                                    destination.write(chunk)
                            photo_urls.append(f"{settings.MEDIA_URL}{path}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ {defect_index}: {e}")


                    defects_list.append({
                        "zone": zone_name,
                        "unit": AssemblyUnit.objects.filter(pk=def_id("defect_unit")).first().name if def_id(
                            "defect_unit") else "",
                        "name": AssemblyDefect.objects.filter(pk=def_id("defect_name")).first().name if def_id(
                            "defect_name") else "",
                        "nameENG": AssemblyDefect.objects.filter(pk=def_id("defect_name")).first().nameENG if def_id(
                            "defect_name") else "",
                        "grade": AssemblyDefectGrade.objects.filter(pk=def_id("defect_grade")).first().name if def_id(
                            "defect_grade") else "",
                        "responsible": AssemblyDefectResponsible.objects.filter(
                            pk=def_id("defect_responsible")).first().name if def_id("defect_responsible") else "",
                        "quantity": quantity,
                        "repair_type": repair_type,
                        "comment": comment,
                        "photos": photo_urls,
                    })
                    defect_index += 1

                inspection_data["defects"] = defects_list

            history_entry.history.setdefault(zone, {}).setdefault(post_name, []).append(inspection_data)
            history_entry.save()

            messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return redirect(request.get_full_path())
        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            print("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:", form.errors)

    else:
        form = AssemblyTemplateForm()

    return render(request, template_name, {
        "form": form,
        "post_id": post_id,
        "post_name": post_name,
        "user_role": request.user.role if hasattr(request.user, 'role') else '',
        "defects": defects,
        "zones": zones,
        "units": units,
        "grades": grades,
        "responsibles": responsibles,
        "line": line.lower(),
    })


@require_GET
@login_required
def vin_status_api(request):
    """
    GET /assembly/api/vin-status/?vin=...
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –£–£–î –∏ VES (–ø–æ–∫–∞ VES –ø—É—Å—Ç–æ–π).
    –§–æ—Ä–º–∞—Ç:
    {
      "vin": "...",
      "uud": {"step": "step1|step2|step3|done|None", "label": "...", "color": "red|yellow|green"},
      "ves": null
    }
    """
    vin = (request.GET.get("vin") or "").strip().upper()
    res = {"vin": vin, "uud": None, "ves": None}

    if not vin:
        return JsonResponse(res)

    vh = VINHistory.objects.filter(vin__iexact=vin).first()
    history = vh.history if vh else {}

    # --- UUD ---
    # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: history["–£–£–î"]["–£–£–î"] = [ { "steps": "step1|step2|step3|done", ... }, ... ]
    def _latest_uud_step(hist: dict):
        try:
            uud_block = (hist.get("–£–£–î") or {}).get("–£–£–î") or []
            if not isinstance(uud_block, list) or not uud_block:
                return None
            # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ entry_index –∏–ª–∏ updated_at/created_at
            def _key(e):
                # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: entry_index (—á–∏—Å–ª–æ–≤–æ–π), –∑–∞—Ç–µ–º updated_at, –∑–∞—Ç–µ–º created_at
                idx = e.get("entry_index") or 0
                upd = e.get("updated_at") or ""
                crt = e.get("created_at") or ""
                return (int(idx), str(upd), str(crt))
            latest = sorted(uud_block, key=_key)[-1]
            return str(latest.get("steps") or "").lower() or None
        except Exception:
            return None

    step = _latest_uud_step(history)

    # –º–∞–ø–ø–∏–Ω–≥ step -> label/color
    if step in ("step1", "step2"):
        res["uud"] = {"step": step, "label": "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –£–£–î", "color": "red"}
    elif step == "step3":
        res["uud"] = {"step": step, "label": "–ñ–¥—ë—Ç –ø—Ä–∏—ë–º–∞ –Ω–∞ –ª–∏–Ω–∏—é", "color": "yellow"}
    else:
        # done –∏–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Üí –∑–µ–ª—ë–Ω—ã–π
        res["uud"] = {"step": step or None, "label": "–Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ –£–£–î", "color": "green"}

    # --- VES (–ø–æ–∫–∞ –ø—É—Å—Ç–æ) ---
    res["ves"] = None

    return JsonResponse(res)



@login_required
@role_required(["controller", "master", 'head_area'])
def documentation_views(request, line="", post_suffix="", template_name="assembly/documentation.html"):
    ZONE_NAME = "–¶–µ—Ö —Å–±–æ—Ä–∫–∏"
    POST_NAME = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    DOC_DIR   = os.path.join("images", "assembly_documentation_photos")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –Ω–∞–ª–∏—á–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _find_defect_in_history(history: dict, defect_id: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (zone_key, post_key, entry_dict, defect_dict) –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id.
        –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî (None, None, None, None).
        """
        if not isinstance(history, dict):
            return None, None, None, None

        for zone_key, posts in history.items():
            if not isinstance(posts, dict):
                continue
            for post_key, entries in posts.items():
                if not isinstance(entries, list):
                    continue
                for entry in entries:
                    defects = (entry or {}).get("defects") or []
                    for defect in defects:
                        # –í –∏—Å—Ç–æ—Ä–∏–∏ —É –¥–µ—Ñ–µ–∫—Ç–∞ –∫–ª—é—á –æ–±—ã—á–Ω–æ "id"
                        if (defect or {}).get("id") == defect_id:
                            return zone_key, post_key, entry, defect
        return None, None, None, None

    def _ensure_uud_container(defect: dict):
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ extra.UUD —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π {"status":..., "history":[...]} –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ UUD.
        """
        extra = defect.setdefault("extra", {})
        if not isinstance(extra, dict):
            extra = {}
            defect["extra"] = extra
        uud = extra.setdefault("UUD", {})
        if not isinstance(uud, dict):
            uud = {}
            extra["UUD"] = uud
        uud.setdefault("status", None)
        uud.setdefault("history", [])
        if not isinstance(uud["history"], list):
            uud["history"] = []
        return uud

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    if request.method == "POST":
        vin_number = (
            request.POST.get("vin_number")
            or request.POST.get("vin")
            or request.GET.get("vin")
            or ""
        ).strip().upper()

        if not vin_number:
            messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
            return redirect(request.path)

        # —Å–æ–±—Ä–∞—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ —É—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã (–∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è)
        raw_fixed = (request.POST.get("fixed_defects") or "").strip()
        fixed_ids = [i for i in (raw_fixed.split(",") if raw_fixed else []) if i]

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ
        def iter_image_files(files_dict):
            for key in files_dict:
                for f in files_dict.getlist(key):
                    if getattr(f, "content_type", "").startswith("image/"):
                        yield f

        photo_urls = []
        for file in iter_image_files(request.FILES):
            try:
                img = compress_uploaded_image(file)
                ts_iso = now_almaty_iso()
                ts_safe = ts_iso.replace(":", "-").replace("T", "_").replace("+", "")
                _, ext = os.path.splitext(img.name or "")
                ext = (ext or ".jpg").lower()
                safe_name = f"{vin_number}_{ts_safe}_{uuid4().hex}{ext}"

                rel_path = os.path.join(DOC_DIR, safe_name)
                abs_path = os.path.join(settings.MEDIA_ROOT, rel_path)
                os.makedirs(os.path.dirname(abs_path), exist_ok=True)

                with open(abs_path, "wb+") as dst:
                    for chunk in img.chunks():
                        dst.write(chunk)

                photo_urls.append(f"{settings.MEDIA_URL}{rel_path}".replace("\\", "/"))
            except Exception as e:
                print(f"[documentation_wiews] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")

        # –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é VIN
        vh, _ = VINHistory.objects.get_or_create(vin=vin_number)

        # ‚îÄ‚îÄ 1) –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –¥–µ—Ñ–µ–∫—Ç–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        applied_ids = []
        if fixed_ids:
            history = vh.history if isinstance(vh.history, dict) else {}
            changed = False

            for d_id in fixed_ids:
                zone_key, post_key, entry, defect = _find_defect_in_history(history, d_id)
                if not defect:
                    continue

                uud = _ensure_uud_container(defect)
                status = uud.get("status")
                # —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–µ/–Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                if status in ("resolved", "impossible"):
                    continue

                ts = now_almaty_iso()

                # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "checking": –¥–æ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—É–ª
                if status == "checking":
                    if uud["history"]:
                        last = uud["history"][-1]
                    else:
                        last = {"id": 1}
                        uud["history"].append(last)

                    if not isinstance(last.get("decision"), dict):
                        last["decision"] = {
                            "by": request.user.username,
                            "at": ts,
                            "status": "resolved",
                            "comment": "–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø–æ—Å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                        }
                        uud["status"] = "resolved"
                        applied_ids.append(d_id)
                        changed = True

                # –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ò–õ–ò —Å—Ç–∞—Ç—É—Å –ø—É—Å—Ç–æ–π/–Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å-—Ä–µ—à–µ–Ω–∏–µ
                elif (not uud["history"]) or status in (None, "", "not_resolved"):
                    next_id = (uud["history"][-1]["id"] + 1) if uud["history"] else 1
                    uud["history"].append({
                        "id": next_id,
                        "decision": {
                            "by": request.user.username,
                            "at": ts,
                            "status": "resolved",
                            "comment": "–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø–æ—Å—Ç–µ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                        }
                    })
                    uud["status"] = "resolved"
                    applied_ids.append(d_id)
                    changed = True

                # –∏–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º

            if changed:
                vh.history = history
                vh.save(update_fields=["history", "updated_at"])

        # ‚îÄ‚îÄ 2) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞ ¬´–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è¬ª –∏ –∫–ª–∞–¥—ë–º applied_ids ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        class _PostStub:
            location = ZONE_NAME
            name = POST_NAME

        entry_id = vh.add_entry(post=_PostStub(), defects=[], extra_data={})
        vh.update_entry(
            entry_id,
            added_at=now_almaty_iso(),
            added_by=request.user.username,
            photos=photo_urls,
            VIN=vin_number,
            fixed_defects=applied_ids,   # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ id
        )

        # –ø–æ–¥—á–∏—Å—Ç–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Å–∞–º–æ–π –∑–∞–ø–∏—Å–∏
        zone, post, entry, entries_list = vh.get_entry_by_id(entry_id)
        if entry is not None:
            entry.pop("defects", None)
            entry.pop("extra_data", None)
            vh.save(update_fields=["history", "updated_at"])

        messages.success(request, "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å ?vin=..., —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –æ—Ç—Ä–∏—Å–æ–≤–∞–ª –¥–µ—Ñ–µ–∫—Ç—ã;
        # –≤–∞—à JS –∑–∞—Ç–µ–º —É–±–µ—Ä—ë—Ç ?vin –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        return redirect(request.path)

    # ===== GET: —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä VIN-–∏–Ω—Ñ–æ –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ =====
    vin = (
        request.GET.get("vin")
        or request.POST.get("vin_number")
        or ""
    ).strip().upper()

    context = {
        "post_name": POST_NAME,
        "line": (line or "").lower(),
        "vin": vin,
        "vehicle_info": None,
        "defect_tree": {},
        "defect_list": [],
        "defects_count": 0,
        "history_updated_at": None,
    }

    if vin:
        vh = VINHistory.objects.filter(vin__iexact=vin).first()
        if vh:
            context["defect_tree"] = vh.history or {}
            # –ë–µ—Ä—ë–º –¥–µ—Ñ–µ–∫—Ç—ã –∏–∑ UUD-–∏—Å—Ç–æ—Ä–∏–∏ (–∫–∞–∫ –≤ UUD)
            context["defect_list"] = _build_defects_index(vh.history or {})
            context["defects_count"] = len(context["defect_list"])
            context["history_updated_at"] = vh.updated_at
        try:
            context["vehicle_info"] = _resolve_vehicle_info(vin)
        except Exception:
            pass

    return render(request, template_name, context)


# --- –ù–æ–≤—ã–π view –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VIN –∏ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ VIN, –¥–∞—Ç—É, –∞–≤—Ç–æ—Ä–∞ –∏ –ª–∏–Ω–∏—é
@login_required
@role_required(["controller", "master", "head_area"])
def assembly_vin_scan_view(request, template_name="assembly/assembly_vin_scan.html", line=None):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Å—Ç: —Å–∫–∞–Ω–∏—Ä—É—é—Ç VIN –∏ –∂–º—É—Ç ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º VIN, –∞–≤—Ç–æ—Ä–∞, –¥–∞—Ç—É –∏ –ª–∏–Ω–∏—é.
    """
    if request.method == "POST":
        vin = (request.POST.get("vin") or request.POST.get("vin_number") or "").strip().upper()
        if not vin:
            messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
            return redirect(request.get_full_path())

        obj, created = AssemblyPassLog.record_scan(vin=vin, user=request.user, line=line)
        if created:
            messages.success(request, f"‚úÖ VIN {obj.vin} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
        else:
            messages.info(request, f"‚ÑπÔ∏è VIN {obj.vin} —É–∂–µ –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.")
        return redirect(request.get_full_path())

    # GET ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–¥–Ω–∏–º –ø–æ–ª–µ–º VIN
    return render(request, template_name, {"line": line})


@login_required
@role_required(["controller", "master", "head_area"])
def assembly_vin_trimout_view(request, template_name="assembly/assembly_vin_trimout.html", line=None):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Å—Ç: —Å–∫–∞–Ω–∏—Ä—É—é—Ç VIN –¥–ª—è TRIM OUT.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º VIN, –∞–≤—Ç–æ—Ä–∞, –¥–∞—Ç—É –∏ –ª–∏–Ω–∏—é.
    """
    if request.method == "POST":
        vin = (request.POST.get("vin") or request.POST.get("vin_number") or "").strip().upper()
        if not vin:
            messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
            return redirect(request.get_full_path())

        obj, _ = TrimOutPassLog.record_scan(vin=vin, user=request.user, line=line)
        messages.success(request, f"‚úÖ TRIM OUT: VIN {obj.vin} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
        return redirect(request.get_full_path())

    return render(request, template_name, {"line": line})


@login_required
@role_required(["controller", "master", 'head_area'])
def ves_views(request, line, post_suffix="", template_name="assembly/ves.html"):
    post_id = request.GET.get("post_id")
    post_obj = PostAssembly.objects.filter(id=post_id).first()
    post_name = post_obj.name if post_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç"

    # üîΩ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    defects = AssemblyDefect.objects.all()
    zones = AssemblyZone.objects.all()
    units = AssemblyUnit.objects.all()
    grades = AssemblyDefectGrade.objects.all()
    responsibles = AssemblyDefectResponsible.objects.all()

    if request.method == "POST":
        form = AssemblyTemplateForm(request.POST, request.FILES)

        if form.is_valid():
            vin_number = form.cleaned_data.get("vin_number")
            has_defect = form.cleaned_data.get("has_defect", "")
            duration_seconds = request.POST.get("inspection_duration_seconds")

            if not vin_number:
                messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                return redirect(request.get_full_path())

            history_entry, _ = VINHistory.objects.get_or_create(vin=vin_number)
            zone = "VES"

            inspection_data = {
                "vin_number": vin_number,
                "controller": request.user.username,
                "has_defect": has_defect,
                "defects": [],
                "date_added": now_almaty_iso(),
                "line": line.lower(),
            }

            try:
                inspection_data["inspection_duration_seconds"] = int(duration_seconds)
            except (ValueError, TypeError):
                inspection_data["inspection_duration_seconds"] = None

            if has_defect == "no":
                pass
            else:
                defects_list = []
                defect_index = 1
                while f"defect_name_{defect_index}" in request.POST:
                    def_id = lambda field: request.POST.get(f"{field}_{defect_index}")
                    comment = request.POST.get(f"defect_comment_{defect_index}", "").strip()
                    repair_type = request.POST.get(f"defect_repair_type_{defect_index}", "").strip().lower()
                    if repair_type not in ["online", "offline"]:
                        repair_type = "online"
                    try:
                        quantity = int(request.POST.get(f"defect_quantity_{defect_index}", "1"))
                    except ValueError:
                        quantity = 1
                    images = request.FILES.getlist(f"defect_photo_{defect_index}")
                    zone_name = request.POST.get(f"defect_zone_{defect_index}", "").strip()
                    photo_urls = []

                    for file in images:
                        try:
                            compressed = compress_uploaded_image(file)
                            filename = compressed.name
                            path = f"images/defects/{filename}"
                            full_path = os.path.join(settings.MEDIA_ROOT, path)
                            os.makedirs(os.path.dirname(full_path), exist_ok=True)
                            with open(full_path, "wb+") as destination:
                                for chunk in compressed.chunks():
                                    destination.write(chunk)
                            photo_urls.append(f"{settings.MEDIA_URL}{path}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ {defect_index}: {e}")

                    defects_list.append({
                        "zone": zone_name,
                        "unit": AssemblyUnit.objects.filter(pk=def_id("defect_unit")).first().name if def_id("defect_unit") else "",
                        "name": AssemblyDefect.objects.filter(pk=def_id("defect_name")).first().name if def_id("defect_name") else "",
                        "nameENG": AssemblyDefect.objects.filter(pk=def_id("defect_name")).first().nameENG if def_id("defect_name") else "",
                        "grade": AssemblyDefectGrade.objects.filter(pk=def_id("defect_grade")).first().name if def_id("defect_grade") else "",
                        "responsible": AssemblyDefectResponsible.objects.filter(pk=def_id("defect_responsible")).first().name if def_id("defect_responsible") else "",
                        "quantity": quantity,
                        "repair_type": repair_type,
                        "comment": comment,
                        "photos": photo_urls,
                    })
                    defect_index += 1

                inspection_data["defects"] = defects_list

            history_entry.history.setdefault(zone, {}).setdefault(post_name, []).append(inspection_data)
            history_entry.save()

            messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return redirect(request.get_full_path())
        else:
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            print("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:", form.errors)

    else:
        form = AssemblyTemplateForm()

    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–ª—ç—Ç—Ç–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—ã
    def _flatten_history(history_root):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤–∏–¥–∞:
        {
            "id": ..., "unit": ..., "name": ..., "grade": ..., "photos": [...],
            "controller": ..., "date_added": ..., "zone": ..., "post": ...
        }
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
          1) –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: { "ZONE": { "POST": [entry, ...] }, ... }
          2) –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: { "POST": [entry, ...] }
          3) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [entry, entry, ...]
        –≥–¥–µ entry = {"controller","date_added","defects":[...], ...}
        """
        res = []
        if not history_root:
            return res

        def _yield_entries(root, zone_name=None, post_name=None):
            # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É
            if isinstance(root, list):
                for entry in root:
                    if isinstance(entry, dict):
                        yield (zone_name or ""), (post_name or ""), entry
                return

            # –°–ª–æ–≤–∞—Ä—å
            if isinstance(root, dict):
                for k, v in root.items():
                    # –í–µ—Ç–∫–∞: –ø–æ—Å—Ç -> [entries]
                    if isinstance(v, list):
                        for entry in v:
                            if isinstance(entry, dict):
                                yield (zone_name or ""), k, entry
                    # –í–µ—Ç–∫–∞: –∑–æ–Ω–∞ -> {–ø–æ—Å—Ç: [entries]}
                    elif isinstance(v, dict):
                        for post_k, entries in v.items():
                            if isinstance(entries, list):
                                for entry in entries:
                                    if isinstance(entry, dict):
                                        yield k, post_k, entry
                            # –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –ø–æ—Å—Ç -> dict (–Ω–µ —Å–ø–∏—Å–æ–∫) ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä
                    # –ò–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        for zone, post, entry in _yield_entries(history_root):
            controller = entry.get("controller") or ""
            when = entry.get("date_added") or ""
            defects = entry.get("defects") or []

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–µ—Ñ–µ–∫—Ç –æ–¥–∏–Ω –∏ –ø—Ä–∏—à—ë–ª dict
            if isinstance(defects, dict):
                defects = [defects]

            if not isinstance(defects, list):
                continue

            for d in defects:
                if not isinstance(d, dict):
                    continue
                res.append({
                    "id": d.get("id") or "",
                    "unit": d.get("unit") or "",
                    "name": d.get("name") or "",
                    "grade": d.get("grade") or "",
                    "photos": d.get("photos") or [],
                    "controller": controller,
                    "date_added": when,
                    "zone": (d.get("zone") or zone or ""),
                    "post": (post or ""),
                })
        return res

    # --- –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É VIN ‚Üí —Å–ø–∏—Å–æ–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞)
    vin_defects_map = {}
    for h in VINHistory.objects.all().only("vin", "history"):
        key = (h.vin or "").upper()
        vin_defects_map[key] = _flatten_history(getattr(h, "history", {}) or {})

    vin_defects_json = json.dumps(vin_defects_map, cls=DjangoJSONEncoder, ensure_ascii=False)

    return render(request, template_name, {
        "form": form,
        "post_id": post_id,
        "post_name": post_name,
        "user_role": request.user.role if hasattr(request.user, 'role') else '',
        "defects": defects,
        "zones": zones,
        "units": units,
        "grades": grades,
        "responsibles": responsibles,
        "line": line.lower(),
        "vin_defects_json": vin_defects_json,
        "vin_defects_data": vin_defects_map,
    })


# --- –ù–æ–≤—ã–π view: VES-–ø–µ—Ä–µ–¥–∞—á–∞/–ø—Ä–∏—ë–º ---
@login_required
@role_required(["controller", "master", 'head_area'])
def ves_pass_view(request, template_name="assembly/ves_pass.html"):
    """
    –ü–æ—Å—Ç "VES-–ø–µ—Ä–µ–¥–∞—á–∞/–ø—Ä–∏—ë–º":
    - –°–∫–∞–Ω–∏—Ä—É—é—Ç VIN.
    - –ï—Å–ª–∏ –ø–æ VIN –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ (received_at is NULL) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–¥–∞—Ç—å –Ω–∞ VES".
    - –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å —Å VES".
    - POST —Å action=give/receive –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
    """
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π ---
    if request.method == "POST":
        vin = (request.POST.get("vin") or request.POST.get("vin_number") or "").strip().upper()
        action = (request.POST.get("action") or "").strip().lower()

        if not vin:
            messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
            return redirect(request.get_full_path())

        try:
            if action == "give":
                VESPassLog.record_give(vin=vin, user=request.user)
                messages.success(request, f"‚úÖ VIN {vin} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ VES.")
            elif action == "receive":
                obj, updated = VESPassLog.record_receive(vin=vin, user=request.user)
                if updated:
                    messages.success(request, f"‚úÖ VIN {vin} –ø—Ä–∏–Ω—è—Ç —Å VES.")
                else:
                    messages.info(request, f"‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ –±—ã–ª–æ. –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–¥–∞—á–µ–π/–ø—Ä–∏—ë–º–æ–º –¥–ª—è {vin}.")
            else:
                messages.error(request, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        except Exception as e:
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π VIN
        return redirect(request.get_full_path())

    # --- –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã / –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ VIN ---
    vin = (request.GET.get("vin") or "").strip().upper()
    open_log = None
    last_log = None
    trace = None

    if vin:
        open_log = VESPassLog.objects.filter(vin=vin, received_at__isnull=True).order_by("-given_at").first()
        last_log = VESPassLog.objects.filter(vin=vin).order_by("-given_at").first()
        trace = TraceData.objects.filter(vin_rk=vin).first()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∂—ë—Å—Ç–∫–æ–π –∑–∞–≤—è–∑–∫–∏ –Ω–∞ —à–∞–±–ª–æ–Ω)
    trace_info = None
    if trace:
        trace_info = {
            "vin": trace.vin_rk,
            "model": getattr(trace, "model", ""),
            "body_color": getattr(trace, "body_color", ""),
            "modification": getattr(trace, "modification", ""),
            "engine_number": getattr(trace, "engine_number", ""),
            "config_code": getattr(trace, "config_code", ""),
        }

    context = {
        "vin": vin,
        "open_log": open_log,     # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ (–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏—ë–º–∞)
        "last_log": last_log,     # –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –ø–æ VIN
        "trace": trace_info,      # –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ (–º–æ–¥–µ–ª—å/—Ü–≤–µ—Ç/–ø—Ä–∏–≤–æ–¥ –∏ —Ç.–¥.)
        "show_give_button": bool(vin and not open_log),
        "show_receive_button": bool(vin and open_log),
    }
    return render(request, template_name, context)


# counter_gwm
# –°—á–µ—Ç—á–∏–∫ TRIM IN
# –ù–∞ –ª–∏–Ω–∏–∏ GWM
# Counter123!


@login_required
@role_required(["controller", "master", "uud_controller", 'head_area'])
def uud_uniq(request, template_name="assembly/uud_uniq.html"):
    """
    –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –ø—Ä–∏ –≤–≤–æ–¥–µ/—Å–∫–∞–Ω–µ VIN –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –∏ –¥–µ—Ñ–µ–∫—Ç—ã.
    """
    vin = (
        request.POST.get("vin")
        or request.POST.get("vin_number")
        or request.GET.get("vin")
        or ""
    ).strip().upper()

    # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "vin": vin,
        "vehicle_info": None,   # —Å—é–¥–∞ –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã
        "defect_tree": {},      # –ø–æ–ª–Ω—ã–π JSON –∏–∑ VINHistory.history
        "defect_list": [],      # –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—É–¥–æ–±–Ω–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü/–∫–∞—Ä—Ç)
        "defects_count": 0,
        "history_updated_at": None,
    }

    if request.method == "POST":
        # –ü–æ–∫–∞ –ù–ò–ß–ï–ì–û –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –¥–∞–Ω–Ω—ã–µ
        if not vin:
            messages.error(request, "‚ùå VIN-–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
            return render(request, template_name, context)

    # –ü–∞–¥–∞–µ–º –¥–∞–ª—å—à–µ –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ vin
    if vin:
        # 1) –î–µ—Ñ–µ–∫—Ç—ã –∏–∑ VINHistory
        vh = VINHistory.objects.filter(vin__iexact=vin).first()
        if vh:
            context["defect_tree"] = vh.history or {}
            context["defect_list"] = _build_defects_index(vh.history or {})
            context["defects_count"] = len(context["defect_list"])
            context["history_updated_at"] = vh.updated_at

        # 2) –î–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å)
        # –ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Vehicle/Tracing/Stock –∏ —Ç.–ø.),
        # –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–∞–≤—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é _resolve_vehicle_info().
        context["vehicle_info"] = _resolve_vehicle_info(vin)

    # GET –±–µ–∑ vin –∏–ª–∏ POST —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä
    return render(request, template_name, context)


def _build_defects_index(history: dict) -> list[dict]:
    items: list[dict] = []

    for zone, posts in (history or {}).items():
        for post_name, entries in (posts or {}).items():
            for entry in (entries or []):
                if not isinstance(entry, dict):   # ‚Üê –∑–∞—â–∏—Ç–∞
                    continue

                defects = entry.get("defects") or []
                if not isinstance(defects, list):  # ‚Üê –Ω–∞ –≤—Å—è–∫–∏–π
                    continue

                for d in defects:
                    if not isinstance(d, dict):    # ‚Üê –∑–∞—â–∏—Ç–∞
                        continue

                    name = (d.get("name") or d.get("defect") or d.get("nameENG") or "")
                    unit = (d.get("unit") or d.get("detail") or "")
                    photos = (d.get("photos") or d.get("defect_photos") or []) or []
                    grade = d.get("grade") or (d.get("extra") or {}).get("qrr_grade")
                    comment = (d.get("comment") or d.get("custom_defect_explanation") or "")

                    extra = d.get("extra") or {}
                    custom_detail_note = d.get("custom_detail_explanation")
                    if custom_detail_note:
                        extra = {**extra, "detail_note": custom_detail_note}

                    items.append({
                        "zone": zone,
                        "post": post_name,
                        "entry_id": entry.get("id"),
                        "entry_index": entry.get("entry_index"),
                        "date_added": entry.get("date_added"),
                        "controller": entry.get("controller"),

                        "defect_id": d.get("id"),
                        "name": name,
                        "unit": unit,
                        "grade": grade,
                        "photos": photos,
                        "comment": comment,
                        "responsible": d.get("responsible"),
                        "zone_inner": d.get("zone"),
                        "quantity": d.get("quantity"),
                        "repair_type": d.get("repair_type"),
                        "nameENG": d.get("nameENG"),
                        "extra": extra,
                    })

    items.sort(key=lambda x: ((x.get("zone") or ""), (x.get("post") or ""), (x.get("date_added") or ""), (x.get("defect_id") or "")))
    return items




def _resolve_vehicle_info(vin: str) -> dict | None:
    # 1) —Å–Ω–∞—á–∞–ª–∞ TraceData ‚Äî —ç—Ç–æ —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
    t = (TraceData.objects
         .filter(vin_rk__iexact=vin)
         .order_by('-id')
         .first())
    if t:
        return {
            "vin": t.vin_rk,
            "engine_number": t.engine_number,
            "model": t.model,
            "body_color": t.body_color,
        }

    # 2) –¥–∞–ª—å—à–µ ‚Äî –º—è–≥–∫–∏–µ —Ñ–æ–ª–ª–±—ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ
    try:
        from supplies.models import VehicleInfo
        v = (VehicleInfo.objects
             .filter(Q(vin__iexact=vin) | Q(vin_number__iexact=vin))
             .order_by("-id").first())
        if v:
            return {
                "vin": vin,
                "engine_number": getattr(v, "engine_number", None),
                "model": getattr(v, "model", None),
                "body_color": getattr(v, "body_color", None),
            }
    except Exception:
        pass

    return None



# –ï—Å–ª–∏ —É—Ç–∏–ª–∏—Ç–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å –∏–º–ø–æ—Ä—Ç
try:
    from vehicle_history.utils import now_almaty_iso  # –ø—Ä–∏–º–µ—Ä
except Exception:
    # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è; –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ê–ª–º–∞-–ê—Ç—ã
    def now_almaty_iso() -> str:
        return dj_now().isoformat()

ZONE = "–£–£–î"
POST = "–£–£–î"

def _payload(request) -> dict:
    """–ß–∏—Ç–∞–µ—Ç JSON –∏–ª–∏ form-data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict."""
    ctype = (request.content_type or "").lower()
    if "application/json" in ctype:
        try:
            return json.loads((request.body or b"").decode("utf-8") or "{}")
        except Exception:
            return {}
    return request.POST

def _ok(state: dict, message: str | None = None, **extra):
    data = {"status": "ok", "uud_state": state}
    if message:
        data["message"] = message
    data.update(extra)
    return JsonResponse(data)

def _err(message: str, code: int = 400, **extra):
    return JsonResponse({"status": "error", "message": message, **extra}, status=code)

def _get_uud_sessions(history: dict, create: bool = False) -> list:
    """
    –î–æ—Å—Ç–∞—ë—Ç –º–∞—Å—Å–∏–≤ —Å–µ—Å—Å–∏–π –£–£–î –∏–∑ history[ZONE][POST].
    –ü—Ä–∏ create=True ‚Äî –º—è–≥–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    if not isinstance(history, dict):
        if not create:
            return []
        history = {}
    zone = history.get(ZONE)
    if zone is None:
        if not create:
            return []
        history[ZONE] = zone = {}
    post = zone.get(POST)
    if post is None:
        if not create:
            return []
        zone[POST] = post = []

    # post –∑–¥–µ—Å—å ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫-—Å–µ—Å—Å–∏–π
    if not isinstance(post, list):
        if create:
            zone[POST] = []
            return zone[POST]
        return []
    return post

def _active_session(sessions: list) -> tuple[int | None, dict | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (index, session) –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π (steps != 'done') —Å–µ—Å—Å–∏–∏.
    """
    for idx in range(len(sessions) - 1, -1, -1):
        s = sessions[idx]
        if isinstance(s, dict) and s.get("steps") != "done":
            return idx, s
    return None, None

def _state_from_sessions(sessions: list) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞.
    """
    idx, sess = _active_session(sessions)
    if sess:
        return {
            "has_active": True,
            "session_id": (sess.get("id") or (idx + 1)),
            "status": sess.get("status"),
            "step": sess.get("steps"),
            "updated_at": sess.get("updated_at"),
        }
    # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –∑–Ω–∞—á–∏—Ç –ª–∏–±–æ –Ω–µ—Ç –≤–æ–æ–±—â–µ, –ª–∏–±–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª done
    last_done = sessions[-1] if sessions else None
    return {
        "has_active": False,
        "last_session_id": (last_done.get("id") if isinstance(last_done, dict) else None),
        "last_status": (last_done.get("status") if isinstance(last_done, dict) else None),
        "step": None,
        "status": None,
    }

def _require_vin(request):
    vin = (_payload(request).get("vin") or request.GET.get("vin") or "").strip().upper()
    if not vin:
        raise ValueError("VIN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
    return vin

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) –ú—ã –æ—Ç–¥–∞–ª–∏ –º–∞—à–∏–Ω—É –Ω–∞ –£–£–î (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π)
# –†–æ–ª–∏: controller, master
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["controller", "master", 'head_area'])
@require_http_methods(["POST"])
def us_to_uud(request):
    try:
        vin = _require_vin(request)
    except ValueError as e:
        return _err(str(e), 400)

    # –î–æ—Å—Ç–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ VIN —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏
    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        sessions = _get_uud_sessions(history, create=True)
        idx, active = _active_session(sessions)

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        if active:
            state = _state_from_sessions(sessions)
            return _ok(state, message="–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –£–£–î; –Ω–æ–≤—ã–π —Ü–∏–∫–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        ts = now_almaty_iso()
        new_id = (sessions[-1].get("id") + 1) if (sessions and isinstance(sessions[-1], dict) and isinstance(sessions[-1].get("id"), int)) else (len(sessions) + 1)
        sess = {
            "id": new_id,
            "status": "hold",
            "steps": "step1",
            "extra_data": {
                "step1_by": request.user.username,
                "step1_at": ts,
            },
            "created_at": ts,
            "updated_at": ts,
        }
        sessions.append(sess)
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        state = _state_from_sessions(sessions)
        return _ok(state, message="–ú–∞—à–∏–Ω–∞ –æ—Ç–¥–∞–Ω–∞ –Ω–∞ –£–£–î (step1).")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2) –£–£–î –∑–∞–±—Ä–∞–ª –µ—ë –≤ –∑–æ–Ω—É –£–£–î
# –†–æ–ª—å: uud_controller
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["uud_controller"])
@require_http_methods(["POST"])
def uud_to_uudzone(request):
    try:
        vin = _require_vin(request)
    except ValueError as e:
        return _err(str(e), 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        sessions = _get_uud_sessions(history, create=False)

        if not sessions:
            return _err("–ú–∞—à–∏–Ω–∞ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –£–£–î (–Ω–µ—Ç —Ü–∏–∫–ª–æ–≤).", 400)

        idx, active = _active_session(sessions)
        if not active:
            return _err("–ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –£–£–î –Ω–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω).", 400)

        step = active.get("steps")
        if step == "step1":
            # OK ‚Üí step2
            ts = now_almaty_iso()
            active["steps"] = "step2"
            active.setdefault("extra_data", {})
            active["extra_data"]["step2_by"] = request.user.username
            active["extra_data"]["step2_at"] = ts
            active["updated_at"] = ts
        elif step in ("step2", "step3"):
            # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∂–µ step2/step3 ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            pass
        else:
            # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            return _err("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –Ω–∞ –£–£–î (step1).", 400)

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])
        return _ok(_state_from_sessions(sessions), message="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –∑–∞–±—Ä–∞–ª–∏ –Ω–∞ –∑–æ–Ω—É –£–£–î (step2).")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3) –° –∑–æ–Ω—ã –£–£–î –ø—Ä–∏–Ω–µ—Å–ª–∏ –Ω–∞ –£–£–î
# –†–æ–ª—å: uud_controller
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["uud_controller"])
@require_http_methods(["POST"])
def uudzone_to_uud(request):
    try:
        vin = _require_vin(request)
    except ValueError as e:
        return _err(str(e), 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        sessions = _get_uud_sessions(history, create=False)

        if not sessions:
            return _err("–ú–∞—à–∏–Ω–∞ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –£–£–î (–Ω–µ—Ç —Ü–∏–∫–ª–æ–≤).", 400)

        idx, active = _active_session(sessions)
        if not active:
            return _err("–ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –£–£–î –Ω–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω).", 400)

        step = active.get("steps")
        if step == "step2":
            # OK ‚Üí step3
            ts = now_almaty_iso()
            active["steps"] = "step3"
            active.setdefault("extra_data", {})
            active["extra_data"]["step3_by"] = request.user.username
            active["extra_data"]["step3_at"] = ts
            active["updated_at"] = ts
        elif step == "step3":
            # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ
            pass
        else:
            return _err("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Ç—Ä–µ–±—É–µ—Ç—Å—è —à–∞–≥ '–∑–∞–±—Ä–∞–ª–∏ –Ω–∞ –∑–æ–Ω—É –£–£–î' (step2).", 400)

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])
        return _ok(_state_from_sessions(sessions), message="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å –∑–æ–Ω—ã –Ω–∞ –£–£–î (step3).")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4) –ú—ã –ø—Ä–∏–Ω—è–ª–∏ —Å –£–£–î
# –†–æ–ª–∏: controller, master
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["controller", "master", 'head_area'])
@require_http_methods(["POST"])
def uud_to_us(request):
    try:
        vin = _require_vin(request)
    except ValueError as e:
        return _err(str(e), 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        sessions = _get_uud_sessions(history, create=False)

        if not sessions:
            return _err("–ú–∞—à–∏–Ω–∞ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –£–£–î (–Ω–µ—Ç —Ü–∏–∫–ª–æ–≤).", 400)

        idx, active = _active_session(sessions)
        if not active:
            return _err("–ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –£–£–î –Ω–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω).", 400)

        step = active.get("steps")
        if step != "step3":
            return _err("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –ø—Ä–∏–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –∑–æ–Ω—ã (step3).", 400)

        ts = now_almaty_iso()
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º step4
        active["steps"] = "step4"
        active.setdefault("extra_data", {})
        active["extra_data"]["step4_by"] = request.user.username
        active["extra_data"]["step4_at"] = ts
        active["updated_at"] = ts

        # –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ü–∏–∫–ª
        active["steps"] = "done"
        active["status"] = "on_line"   # —Ç–æ–ª—å–∫–æ –≤ done ‚Äî on_line, –∏–Ω–∞—á–µ hold

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        return _ok(_state_from_sessions(sessions), message="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –º–∞—à–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞ —Å –£–£–î (done).")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) GET-—ç–Ω–¥–ø–æ–∏–Ω—Ç, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ —Å–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ VIN
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@require_http_methods(["GET"])
def uud_current_state(request):
    vin = (request.GET.get("vin") or "").strip().upper()
    if not vin:
        return _err("VIN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.", 400)

    vh = VINHistory.objects.filter(vin__iexact=vin).first()
    if not vh or not isinstance(vh.history, dict):
        return _ok({"has_active": False, "step": None, "status": None}, message="–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    sessions = _get_uud_sessions(vh.history, create=False)
    return _ok(_state_from_sessions(sessions))





# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ñ–µ–∫—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ JSON-–∏—Å—Ç–æ—Ä–∏–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _find_defect_by_id(history: dict, defect_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (zone, post_name, entry_dict, defect_dict) –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞ –ø–æ ID.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî (None, None, None, None)
    """
    if not isinstance(history, dict):
        return None, None, None, None

    for zone, posts in history.items():
        if not isinstance(posts, dict):
            continue
        for post_name, entries in posts.items():
            if not isinstance(entries, list):
                continue
            for entry in entries:
                if not isinstance(entry, dict):
                    continue
                defects = entry.get("defects") or []
                if not isinstance(defects, list):
                    continue
                for d in defects:
                    if isinstance(d, dict) and str(d.get("id")) == str(defect_id):
                        return zone, post_name, entry, d
    return None, None, None, None


def _ensure_uud_container(defect: dict) -> dict:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ defect['extra']['UUD'].
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict UUD-–±–ª–æ–∫–∞.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
      extra: {
        ...,
        "UUD": {
          "status": "checking" | "resolved" | "not_resolved" | None,
          "history": [ { "id": 1, "fix": {...}, "decision": {...}? }, ... ]
        }
      }
    """
    extra = defect.setdefault("extra", {})
    uud = extra.get("UUD")
    if not isinstance(uud, dict):
        uud = {"status": None, "history": []}
        extra["UUD"] = uud
    if "history" not in uud or not isinstance(uud["history"], list):
        uud["history"] = []
    return uud


def _save_uploaded_photos(request, vin: str) -> list[str]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (input name="photos") –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π.
    –ü–∞–ø–∫–∞: images/uud_fixes/
    """
    saved = []
    files = request.FILES.getlist("photos") or []
    for f in files:
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        base, ext = os.path.splitext(getattr(f, "name", "") or "")
        ext = (ext or ".jpg").lower()
        fname = f"{vin}_{uuid.uuid4().hex}{ext}"
        path = os.path.join("images", "uud_fixes", fname).replace("\\", "/")
        saved_path = default_storage.save(path, f)  # type: ignore
        # –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è ‚Äî URL-–ø—É—Ç—å —á–µ—Ä–µ–∑ /media/... –µ—Å–ª–∏ —É —Ç–µ–±—è MEDIA_URL=/media/
        if not saved_path.startswith("/"):
            saved_path = "/" + saved_path
        saved.append(saved_path if saved_path.startswith("/media/") else "/media/" + saved_path.lstrip("/"))
    return saved


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) UUD-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ history)
#    –í–∏–¥–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¢–û–õ–¨–ö–û —Ä–æ–ª–∏ "uud_controller".
#    –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞:
#      - –µ—Å–ª–∏ UUD.status –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ == "not_resolved" ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π history-—ç–ª–µ–º–µ–Ω—Ç, —Å—Ç–∞–≤–∏–º status="checking"
#      - –µ—Å–ª–∏ UUD.status == "checking" ‚Üí 409 (—É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)
#      - –µ—Å–ª–∏ UUD.status == "resolved" ‚Üí 409 (—É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["uud_controller"])
@require_http_methods(["POST"])
def uud_defect_submit_fix(request):
    """
    POST form-data –∏–ª–∏ JSON:
      vin: str
      defect_id: str
      comment: str (optional)
      photos: <files>[] (optional)
    """
    data = _payload(request)
    vin = (data.get("vin") or "").strip().upper()
    defect_id = (data.get("defect_id") or "").strip()

    if not vin or not defect_id:
        return _err("VIN –∏ defect_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        zone, post_name, entry, defect = _find_defect_by_id(history, defect_id)
        if not defect:
            return _err("–î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404)

        # —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—è UUD
        uud = _ensure_uud_container(defect)
        status = uud.get("status")

        if status == "checking":
            return _err("–ü–æ –¥–∞–Ω–Ω–æ–º—É –¥–µ—Ñ–µ–∫—Ç—É —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞.", 409)
        if status == "resolved":
            return _err("–î–µ—Ñ–µ–∫—Ç —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π.", 409)
        # ‚ûï –î–û–ë–ê–í–ò–¢–¨:
        if status == "impossible":
            return _err("–î–µ—Ñ–µ–∫—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.", 409)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photos = _save_uploaded_photos(request, vin)

        ts = now_almaty_iso()
        comment = (data.get("comment") or "").strip()

        # –Ω–æ–≤—ã–π —Ü–∏–∫–ª —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
        next_id = (uud["history"][-1]["id"] + 1) if uud["history"] else 1
        uud["history"].append({
            "id": next_id,
            "fix": {
                "by": request.user.username,
                "at": ts,
                "comment": comment,
                "photos": photos,
            }
        })
        uud["status"] = "checking"

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        # –≤–µ—Ä–Ω—ë–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UUD –ø–æ –¥–µ—Ñ–µ–∫—Ç—É
        return JsonResponse({
            "status": "ok",
            "message": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (checking).",
            "vin": vin,
            "defect_id": defect_id,
            "UUD": uud,
        })


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2) –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä/–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ: "—É—Å—Ç—Ä–∞–Ω–µ–Ω–æ" –∏–ª–∏ "–Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ"
#    –í–∏–¥–Ω–æ/–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–æ–ª—è–º "controller", "master".
#    –ü—Ä–∞–≤–∏–ª–∞:
#      - —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å == "checking" –∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è history-–∑–∞–ø–∏—Å—å –±–µ–∑ decision
#      - decision = "resolved" ‚Üí status="resolved"
#      - decision = "not_resolved" (+ reason?) ‚Üí status="not_resolved"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@role_required(["controller", "master", 'head_area'])
@require_http_methods(["POST"])
def uud_defect_decide(request):
    """
    POST JSON –∏–ª–∏ form-data:
      vin: str
      defect_id: str
      decision: "resolved" | "not_resolved"
      comment: str (optional, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è 'not_resolved' –ø–æ UX)
    """
    data = _payload(request)
    vin = (data.get("vin") or "").strip().upper()
    defect_id = (data.get("defect_id") or "").strip()
    decision = (data.get("decision") or "").strip().lower()
    comment = (data.get("comment") or "").strip()

    if not vin or not defect_id or decision not in ("resolved", "not_resolved"):
        return _err("VIN, defect_id –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ decision –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        zone, post_name, entry, defect = _find_defect_by_id(history, defect_id)
        if not defect:
            return _err("–î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404)

        uud = _ensure_uud_container(defect)
        if uud.get("status") != "checking":
            return _err("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ä–µ—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ 'checking'.", 409)

        if not uud["history"]:
            return _err("–ò—Å—Ç–æ—Ä–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å.", 409)

        last = uud["history"][-1]
        if "decision" in last and isinstance(last["decision"], dict):
            return _err("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç —Ä–µ—à–µ–Ω–∏–µ–º.", 409)

        ts = now_almaty_iso()
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        last["decision"] = {
            "by": request.user.username,
            "at": ts,
            "status": decision,
            **({"comment": comment} if comment else {}),
        }
        uud["status"] = decision  # 'resolved' –∏–ª–∏ 'not_resolved'

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        return JsonResponse({
            "status": "ok",
            "message": ("–ü—Ä–∏–Ω—è—Ç–æ: —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ." if decision == "resolved" else "–ü—Ä–∏–Ω—è—Ç–æ: –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ."),
            "vin": vin,
            "defect_id": defect_id,
            "UUD": uud,
        })


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–ª—É—á–∏—Ç—å UUD-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–µ—Ñ–µ–∫—Ç—É
#    –£–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏/–æ–∫–Ω–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@login_required
@require_http_methods(["GET"])
def uud_defect_info(request):
    """
    GET:
      vin: str
      defect_id: str
    –û—Ç–≤–µ—Ç:
      { status: "ok", vin, defect_id, UUD: {...}, defect: {...–º–∏–Ω–∏–º—É–º...} }
    """
    vin = (request.GET.get("vin") or "").strip().upper()
    defect_id = (request.GET.get("defect_id") or "").strip()

    if not vin or not defect_id:
        return _err("VIN –∏ defect_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", 400)

    vh = VINHistory.objects.filter(vin__iexact=vin).first()
    if not vh or not isinstance(vh.history, dict):
        return _err("–ò—Å—Ç–æ—Ä–∏—è –ø–æ VIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 404)

    zone, post_name, entry, defect = _find_defect_by_id(vh.history, defect_id)
    if not defect:
        return _err("–î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404)

    uud = (_ensure_uud_container(defect) or {})
    # –æ—Ç–¥–∞—ë–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–µ—Ñ–µ–∫—Ç–∞ –¥–ª—è UI
    card = {
        "id": defect.get("id"),
        "name": defect.get("name"),
        "unit": defect.get("unit"),
        "grade": defect.get("grade"),
        "photos": defect.get("photos") or [],
        "zone": zone,
        "post": post_name,
        "entry_id": entry.get("id") if isinstance(entry, dict) else None,
    }

    return JsonResponse({
        "status": "ok",
        "vin": vin,
        "defect_id": defect_id,
        "UUD": uud,
        "defect": card,
    })


@login_required
@role_required(["uud_controller"])
@require_http_methods(["POST"])
def uud_defect_mark_impossible(request):
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç –∫–∞–∫ '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å' —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –£–£–î.

    POST form-data –∏–ª–∏ JSON:
      vin: str
      defect_id: str
      comment: str (optional)
      photos: <files>[] (optional)
    """
    data = _payload(request)
    vin = (data.get("vin") or "").strip().upper()
    defect_id = (data.get("defect_id") or "").strip()
    comment = (data.get("comment") or "").strip()

    if not vin or not defect_id:
        return _err("VIN –∏ defect_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        zone, post_name, entry, defect = _find_defect_by_id(history, defect_id)
        if not defect:
            return _err("–î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404)

        uud = _ensure_uud_container(defect)
        status = uud.get("status")

        if status == "checking":
            return _err("–ü–æ –¥–∞–Ω–Ω–æ–º—É –¥–µ—Ñ–µ–∫—Ç—É —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞.", 409)
        if status == "resolved":
            return _err("–î–µ—Ñ–µ–∫—Ç —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π.", 409)
        if status == "impossible":
            # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: —É–∂–µ –ø–æ–º–µ—á–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return JsonResponse({
                "status": "ok",
                "message": "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.",
                "vin": vin,
                "defect_id": defect_id,
                "UUD": uud,
            })

        # –ú–æ–∂–Ω–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        photos = _save_uploaded_photos(request, vin)

        ts = now_almaty_iso()
        next_id = (uud["history"][-1]["id"] + 1) if uud["history"] else 1
        uud["history"].append({
            "id": next_id,
            "fix": {
                "kind": "impossible",           # ‚Üê –≤–∞–∂–Ω–æ
                "by": request.user.username,
                "at": ts,
                "comment": comment,
                "photos": photos,
            }
        })
        uud["status"] = "impossible"

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        return JsonResponse({
            "status": "ok",
            "message": "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é.",
            "vin": vin,
            "defect_id": defect_id,
            "UUD": uud,
        })

def uud_defect_decide(request):
    """
    POST JSON –∏–ª–∏ form-data:
      vin: str
      defect_id: str
      decision: "resolved" | "not_resolved" | "impossible"
      comment: str (optional)
    """
    data = _payload(request)
    vin = (data.get("vin") or "").strip().upper()
    defect_id = (data.get("defect_id") or "").strip()
    decision = (data.get("decision") or "").strip().lower()
    comment = (data.get("comment") or "").strip()

    if not vin or not defect_id or decision not in ("resolved", "not_resolved", "impossible"):
        return _err("VIN, defect_id –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π decision –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", 400)

    with transaction.atomic():
        try:
            vh = VINHistory.objects.select_for_update().get(vin__iexact=vin)
        except VINHistory.DoesNotExist:
            return _err("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.", 404)

        history = vh.history if isinstance(vh.history, dict) else {}
        zone, post_name, entry, defect = _find_defect_by_id(history, defect_id)
        if not defect:
            return _err("–î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404)

        uud = _ensure_uud_container(defect)

        if not uud["history"]:
            return _err("–ò—Å—Ç–æ—Ä–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å.", 409)

        last = uud["history"][-1]
        if "decision" in last and isinstance(last["decision"], dict):
            return _err("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç —Ä–µ—à–µ–Ω–∏–µ–º.", 409)

        ts = now_almaty_iso()

        if decision in ("resolved", "not_resolved"):
            if uud.get("status") != "checking":
                return _err("–†–µ—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ 'checking'.", 409)

            last["decision"] = {
                "by": request.user.username,
                "at": ts,
                "status": decision,
                **({"comment": comment} if comment else {}),
            }
            # –∑–¥–µ—Å—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            uud["status"] = decision

        else:  # decision == "impossible"
            if uud.get("status") != "impossible":
                return _err("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ' –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ 'impossible'.", 409)
            fix = last.get("fix") or {}
            if fix.get("kind") != "impossible":
                return _err("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é'.", 409)

            last["decision"] = {
                "by": request.user.username,
                "at": ts,
                "status": "impossible",
                **({"comment": comment} if comment else {}),
            }
            # —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—ë—Ç—Å—è 'impossible'
            # uud["status"] = "impossible"

        vh.history = history
        vh.save(update_fields=["history", "updated_at"])

        return JsonResponse({
            "status": "ok",
            "message": (
                "–ü—Ä–∏–Ω—è—Ç–æ: —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ."
                if decision == "resolved" else
                ("–ü—Ä–∏–Ω—è—Ç–æ: –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ." if decision == "not_resolved" else "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å.")
            ),
            "vin": vin,
            "defect_id": defect_id,
            "UUD": uud,
        })






#—Ç–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ -----------------------------------------------------------------------------------------


ZONE_DOC   = "–¶–µ—Ö —Å–±–æ—Ä–∫–∏"
POST_DOC   = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"


def _doc_parse_iso_no_convert(value):
    """–ü–∞—Ä—Å–∏–º ISO-–¥–∞—Ç—É –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TZ –∏ –±–µ–∑ —Å–¥–≤–∏–≥–æ–≤."""
    if not value:
        return None
    from datetime import datetime
    try:
        s = value.replace("Z", "+00:00") if isinstance(value, str) else value
        return datetime.fromisoformat(s)
    except Exception:
        return None


def _doc_count_impossible_in_zone(history_dict, zone_name):
    """
    –°—á–∏—Ç–∞–µ—Ç –¥–µ—Ñ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –†–û–í–ù–û 'impossible' –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ (–ø–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º –∑–æ–Ω—ã).
    """
    if not isinstance(history_dict, dict):
        return 0
    zone = history_dict.get(zone_name, {})
    total = 0
    if isinstance(zone, dict):
        for _post, entries in zone.items():
            if not isinstance(entries, list):
                continue
            for entry in entries:
                if not isinstance(entry, dict):
                    continue
                defects = entry.get("defects") or []
                if not isinstance(defects, list):
                    continue
                for d in defects:
                    if not isinstance(d, dict):
                        continue
                    if (d.get("status") or "").strip().lower() == "impossible":
                        total += 1
    return total


def _doc_build_trace_map(vins: set[str]) -> dict[str, tuple[str, str, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {VIN: (brand, model, body_color, config_code)} –∏–∑ TraceData.
    –ù–µ –ø–∞–¥–∞–µ—Ç, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã/–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
    """
    result: dict[str, tuple[str, str, str, str]] = {}
    if not vins:
        return result
    try:
        from supplies.models import TraceData
        qs = TraceData.objects.filter(vin_rk__in=vins).only(
            "vin_rk", "brand", "model", "body_color", "config_code"
        )
        for t in qs:
            brand = (t.brand or "").strip()
            model = (t.model or "").strip()
            body_color = (getattr(t, "body_color", "") or "").strip()
            config_code = (getattr(t, "config_code", "") or "").strip()
            result[t.vin_rk] = (brand, model, body_color, config_code)
    except Exception:
        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ —É—Å–ø–µ–ª–∏ —Å–æ–±—Ä–∞—Ç—å.
        pass
    return result


@login_required
@role_required(["controller", "master", "head_area"])
def documentation_table_view(request, template_name="assembly/documentation_table.html"):
    """
    –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –ø–æ—Å—Ç—É ¬´–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è¬ª.
    –ö–æ–ª–æ–Ω–∫–∏: VIN, –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, –¥–∞—Ç–∞, –≤—Ä–µ–º—è (–∫–∞–∫ –≤ –±–∞–∑–µ), added_by,
             –î–∞/–ù–µ—Ç (–µ—Å—Ç—å –ª–∏ impossible), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ impossible (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞),
             added_at (—Å—ã—Ä–æ–µ ISO –∏–∑ entry).
    """
    from vehicle_history.models import VINHistory

    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ impossible –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ VIN
    def _count_impossible_in_history(history: dict) -> int:
        if not isinstance(history, dict):
            return 0
        total = 0
        for zone_posts in history.values():
            if not isinstance(zone_posts, dict):
                continue
            for post_entries in zone_posts.values():
                if not isinstance(post_entries, list):
                    continue
                for entry in post_entries:
                    defects = entry.get("defects") or []
                    if not isinstance(defects, list):
                        continue
                    for d in defects:
                        status = (
                            ((d or {}).get("extra") or {})
                            .get("UUD", {})
                            .get("status", "")
                        )
                        s = str(status).lower()
                        if s in ("impossible", "imposible"):
                            total += 1
        return total

    rows = []
    vins_for_trace: set[str] = set()
    impossible_by_vin: dict[str, int] = {}

    # –ë–µ—Ä—ë–º –∑–∞–ø–∏—Å–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ updated_at —É VINHistory
    for vh in VINHistory.objects.only("vin", "history", "updated_at").order_by("-updated_at"):
        vin = (vh.vin or "").strip()
        history = vh.history or {}

        # –ü–æ—Å—á–∏—Ç–∞—Ç—å impossible –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ VIN
        if vin and vin not in impossible_by_vin:
            impossible_by_vin[vin] = _count_impossible_in_history(history)

        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∑–æ–Ω–µ/–ø–æ—Å—Ç–µ
        zone_block = history.get(ZONE_DOC, {})
        posts = zone_block.get(POST_DOC, [])
        if not isinstance(posts, list):
            continue

        if vin:
            vins_for_trace.add(vin)

        for entry in posts:
            if not isinstance(entry, dict):
                continue

            added_by = entry.get("added_by") or ""
            # ‚úÖ –ë–µ—Ä—ë–º —Å—ã—Ä–æ–µ added_at (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî date_added), –ë–ï–ó —Å–æ—Ä—Ç-–∫–ª—é—á–µ–π
            added_at_raw = entry.get("added_at") or entry.get("date_added") or ""

            # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–µ–¥–µ–º date/time (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), –Ω–æ —Å—á–∏—Ç–∞–µ–º –∏–∑ added_at_raw
            dt = _doc_parse_iso_no_convert(added_at_raw)
            date_str = dt.strftime("%d.%m.%Y") if dt else ""
            time_str = dt.strftime("%H:%M") if dt else ""

            imp_count = impossible_by_vin.get(vin, 0)

            rows.append({
                "vin": entry.get("VIN") or vin,
                "brand": "",
                "model": "",
                "body_color": "",  # ‚Üê –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                "config_code": "",  # ‚Üê –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                "date": date_str,
                "time": time_str,
                "added_by": added_by,
                "impossible_yesno": "–î–∞" if imp_count > 0 else "–ù–µ—Ç",
                "impossible_defects": imp_count,
                "added_at": added_at_raw,
            })

    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –±—Ä–µ–Ω–¥/–º–æ–¥–µ–ª—å –ø–∞—á–∫–æ–π
    trace_map = _doc_build_trace_map(vins_for_trace)  # –æ–±–Ω–æ–≤–∏–º —Å–∞–º —Ö–µ–ª–ø–µ—Ä –Ω–∞ —à–∞–≥–µ 3
    for r in rows:
        data = trace_map.get(r["vin"])
        if isinstance(data, (list, tuple)):
            # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 2 –∏–ª–∏ 4 –∑–Ω–∞—á–µ–Ω–∏—è
            if len(data) == 2:
                brand, model = data
                body_color = ""
                config_code = ""
            else:
                brand, model, body_color, config_code = (list(data) + ["", "", "", ""])[:4]
        elif isinstance(data, dict):
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ö–µ–ª–ø–µ—Ä –≤–µ—Ä–Ω—ë—Ç dict
            brand = data.get("brand", "")
            model = data.get("model", "")
            body_color = data.get("body_color", "")
            config_code = data.get("config_code", "")
        else:
            brand = model = body_color = config_code = ""

        r["brand"] = brand
        r["model"] = model
        r["body_color"] = body_color
        r["config_code"] = config_code
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—ã—Ä–æ–º—É added_at (ISO-—Å—Ç—Ä–æ–∫–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ), –∑–∞—Ç–µ–º –ø–æ VIN
    rows.sort(key=lambda r: (r.get("added_at", ""), r.get("vin", "")), reverse=True)

    return render(request, template_name, {"rows": rows})



# ====== –ó–ê–ú–ï–ù–ò –≠–¢–ò 2 –§–£–ù–ö–¶–ò–ò –ü–û–î –°–í–û–Æ –ë–î ======
def fetch_bundle_for_vin(vin: str) -> Dict[str, Any]:
    from vehicle_history.models import VINHistory
    vh = (
        VINHistory.objects
        .filter(vin__iexact=str(vin).strip())
        .only("history", "updated_at")
        .order_by("-updated_at")  # ‚Üê –≤—Å–µ–≥–¥–∞ —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è –∏—Å—Ç–æ—Ä–∏—è
        .first()
    )
    return (vh.history or {}) if vh else {}

def get_base_attrs_for_vin(vin: str) -> Dict[str, str]:
    """–ë—Ä–µ–Ω–¥/–º–æ–¥–µ–ª—å/—Ü–≤–µ—Ç/–∫–æ–¥ –±–µ—Ä—ë–º –∏–∑ supplies.TraceData –ø–æ vin_rk."""
    from supplies.models import TraceData
    tr = (TraceData.objects
          .filter(vin_rk__iexact=str(vin).strip())
          .only("brand", "model", "body_color", "config_code")
          .order_by("-date_added")
          .first())
    return {
        "brand": (getattr(tr, "brand", "") or ""),
        "model": (getattr(tr, "model", "") or ""),
        "body_color": (getattr(tr, "body_color", "") or ""),
        "config_code": (getattr(tr, "config_code", "") or ""),
    }


# ====== –•–ï–õ–ü–ï–†–´ –ü–ê–†–°–ò–ù–ì–ê/–§–û–†–ú–ê–¢–û–í ======
def split_dt(dt_str: str) -> Tuple[str, str]:
    """'2025-09-11T11:48:55.153472+00:00' -> ('11.09.2025', '11:48')"""
    if not dt_str:
        return "", ""
    try:
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ISO —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
        dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–æ—Ä
        try:
            date_part, time_part = dt_str.split("T", 1)
            dt = datetime.fromisoformat(date_part + "T" + time_part[:8])
        except Exception:
            return "", ""
    return dt.strftime("%d.%m.%Y"), dt.strftime("%H:%M")


def image_stream_from_media(
    rel_or_abs_path: str,
    max_width_px: int = 140,   # ‚îÄ —ç—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥,
    max_height_px: int = 110,  #   –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
    jpeg_quality: int = 92,
) -> io.BytesIO | None:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ MEDIA_ROOT (–∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏) –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –≤ JPEG.
    –ë–æ–ª—å—à–µ –ù–ï —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ 140√ó110 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ,
    –ª–∏—à—å –º—è–≥–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É (pixel_cap_long_side) –∏ –¥–∞—ë–º —É–º–µ—Ä–µ–Ω–Ω—É—é
    –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–∑—É–º–Ω–æ–≥–æ –≤–µ—Å–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ Excel
    –±–µ–∑ —Å–∏–ª—å–Ω–æ–π –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–æ–∫ JPEG (BytesIO) –∏–ª–∏ None.
    """
    pixel_cap_long_side = 2048  # –º—è–≥–∫–∏–π ¬´–ø–æ—Ç–æ–ª–æ–∫¬ª –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

    if not rel_or_abs_path:
        return None

    p = rel_or_abs_path
    if p.startswith("/media/"):
        p = p[len("/media/"):]
    if not os.path.isabs(p):
        p = os.path.join(settings.MEDIA_ROOT, p)
    if not os.path.exists(p):
        return None

    try:
        im = Image.open(p).convert("RGB")  # Excel –Ω–µ –ª—é–±–∏—Ç PNG —Å –∞–ª—å—Ñ–æ–π
        w, h = im.size
        if not w or not h:
            return None

        # –ú—è–≥–∫–∏–π –∫–∞–ø –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        long_side = max(w, h)
        if pixel_cap_long_side and long_side > pixel_cap_long_side:
            scale = pixel_cap_long_side / float(long_side)
            new_w, new_h = max(1, int(w * scale)), max(1, int(h * scale))
            im = im.resize((new_w, new_h), Image.LANCZOS)

        bio = io.BytesIO()
        im.save(
            bio,
            format="JPEG",
            quality=jpeg_quality,   # ~92: —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Å
            optimize=True,
            subsampling=1           # 4:2:2 ‚Äî –∫–æ–º–ø—Ä–æ–º–∏—Å—Å —á—ë—Ç–∫–æ—Å—Ç–∏/–≤–µ—Å–∞
        )
        bio.seek(0)
        return bio
    except Exception:
        return None


def _split_dt_iso_to_date_time(dt_str: str) -> Tuple[str, str]:
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: '2025-09-13T11:09:09.279269+00:00' ‚Üí ('13.09.2025','11:09')
    try:
        dt = datetime.fromisoformat((dt_str or "").replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y"), dt.strftime("%H:%M")
    except Exception:
        return "", ""


def iter_normalized_defects(bundle: dict):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ –¥–µ—Ñ–µ–∫—Ç–∞–º –∏–∑ –û–ë–û–ò–• —Ü–µ—Ö–æ–≤ —Å —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª–µ–π.
    –î–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏-–æ—Å–º–æ—Ç—Ä–∞ (inspection/post entry) —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
    yield —Å–ª–æ–≤–∞—Ä—å:
      {
        "detail": str, "defect": str, "grade": str,
        "def_photos": List[str], "controller": str,
        "found_date": "DD.MM.YYYY", "found_time": "HH:MM",
        "uud": dict | {},
      }
    """
    if not isinstance(bundle, dict):
        return

    # 1) –¶–µ—Ö –ø–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –¢–ï–ö–£–©–ï–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
    supply = bundle.get("–¶–µ—Ö –ø–æ—Å—Ç–∞–≤–∫–∏") or {}
    if isinstance(supply, dict):
        for _zone_name, inspections in supply.items():
            for insp in (inspections or []):
                controller = (insp.get("controller") or "").strip()
                found_date, found_time = split_dt(insp.get("date_added") or "")
                for d in (insp.get("defects") or []):
                    uud = ((d.get("extra") or {}).get("UUD") or {})
                    defect = (d.get("defect") or d.get("name") or d.get("nameENG") or "").strip()
                    detail = (d.get("detail") or d.get("unit") or "").strip()
                    grade  = (d.get("grade") or "").strip()
                    def_photos_all = list(d.get("defect_photos") or d.get("photos") or [])
                    def_photos = list(dict.fromkeys([str(p) for p in def_photos_all]))
                    yield {
                        "detail": detail, "defect": defect, "grade": grade,
                        "def_photos": def_photos, "controller": controller,
                        "found_date": found_date, "found_time": found_time,
                        "uud": uud,
                    }

    # 2) –¶–µ—Ö —Å–±–æ—Ä–∫–∏ ‚Äî –ù–û–í–û–ï (—Å —É—á—ë—Ç–æ–º –¥—Ä—É–≥–æ–π —Å—Ö–µ–º—ã –ø–æ–ª–µ–π)
    assembly = bundle.get("–¶–µ—Ö —Å–±–æ—Ä–∫–∏") or {}
    if isinstance(assembly, dict):
        for _post_name, entries in assembly.items():
            for insp in (entries or []):
                controller = (insp.get("controller") or "").strip()
                # unify –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞ –ø–æ inspection
                found_date, found_time = _split_dt_iso_to_date_time(insp.get("date_added") or "")
                for d in (insp.get("defects") or []):
                    # UUD —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞—è –∂–µ (–≤–Ω—É—Ç—Ä–∏ d["extra"]["UUD"])
                    uud = ((d.get("extra") or {}).get("UUD") or {})
                    # –ú–∞–ø–ø–∏–Ω–≥ –∏–º—ë–Ω –ø–æ–ª–µ–π
                    defect = (d.get("defect") or d.get("name") or d.get("nameENG") or "").strip()
                    detail = (d.get("detail") or d.get("unit") or "").strip()
                    grade  = (d.get("grade") or "").strip()
                    def_photos_all = list(d.get("defect_photos") or d.get("photos") or [])
                    def_photos = list(dict.fromkeys([str(p) for p in def_photos_all]))
                    yield {
                        "detail": detail, "defect": defect, "grade": grade,
                        "def_photos": def_photos, "controller": controller,
                        "found_date": found_date, "found_time": found_time,
                        "uud": uud,
                    }


# ====== –°–ë–û–† –°–¢–†–û–ö –î–õ–Ø XLSX ======
def collect_rows(
    vins: List[str],
    grade_filter: set[str] | None = None,
) -> Tuple[List[Dict[str, Any]], int, int, int]:
    """
    –í –æ—Ç—á—ë—Ç –ø–æ–ø–∞–¥–∞—é—Ç:
      - –≤—Å–µ –¥–µ—Ñ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º UUD = impossible/imposible (–∫–∞–∂–¥—ã–π –¥–µ—Ñ–µ–∫—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π),
        –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –≥—Ä–µ–π–¥–∞–º —á–µ—Ä–µ–∑ grade_filter (–Ω–∞–±–æ—Ä {'V1+','V1','V2','V3'});
      - –µ—Å–ª–∏ —É VIN –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:
          * –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –û–î–ù–ê —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å –±–ª–æ–∫–æ–º '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è';
          * —Å —Ñ–∏–ª—å—Ç—Ä–æ–º ‚Äî VIN –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è (–Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—á—ë—Ç).
    """

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≥—Ä–µ–π–¥–æ–≤
    norm_grade_filter: set[str] | None = None
    if grade_filter:
        norm_grade_filter = {str(g).strip().upper().replace(" ", "") for g in grade_filter} or None

    rows: List[Dict[str, Any]] = []
    max_doc_ph = max_def_ph = max_uud_ph = 0

    MIN_DOC_PHOTO_COLS = 2
    MIN_DEF_PHOTO_COLS = 2
    MIN_UUD_PHOTO_COLS = 2

    seen: set[tuple] = set()

    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ù–ï–®–ù–ò–ô iter_normalized_defects(bundle)
    for vin in vins:
        bundle = fetch_bundle_for_vin(vin) or {}
        base = get_base_attrs_for_vin(vin)

        # --- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        doc_list = (bundle.get("–¶–µ—Ö —Å–±–æ—Ä–∫–∏") or {}).get("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è") or []
        doc_block = {}
        if doc_list:
            doc_block = sorted(
                doc_list,
                key=lambda x: x.get("added_at") or x.get("date_added") or "",
                reverse=True,
            )[0]

        doc_src_ts = (doc_block.get("added_at") or doc_block.get("date_added") or "")
        doc_date, doc_time = split_dt(doc_src_ts)
        doc_by = (doc_block.get("added_by") or "").strip()

        # —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_photos_all = list(doc_block.get("photos") or [])
        doc_photos = list(dict.fromkeys([str(p) for p in doc_photos_all]))
        max_doc_ph = max(max_doc_ph, len(doc_photos))

        # --- –î–µ—Ñ–µ–∫—Ç—ã: —Ç–æ–ª—å–∫–æ impossible + —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä–µ–π–¥–∞–º (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        has_impossible = False
        for item in iter_normalized_defects(bundle):
            uud = item.get("uud") or {}
            status = (uud.get("status") or "").lower()
            if status not in {"impossible", "imposible"}:
                continue

            detail = item.get("detail", "")
            defect = item.get("defect", "")
            grade  = item.get("grade", "")
            controller = item.get("controller", "")
            found_date = item.get("found_date", "")
            found_time = item.get("found_time", "")

            # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä–µ–π–¥–∞–º
            if norm_grade_filter is not None:
                grade_norm = (grade or "").strip().upper().replace(" ", "")
                if grade_norm not in norm_grade_filter:
                    continue

            has_impossible = True

            # —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞
            def_photos = item.get("def_photos") or []
            max_def_ph = max(max_def_ph, len(def_photos))

            # --- UUD (fix/decision + —Ñ–æ—Ç–æ)
            uud_by = uud_date = uud_time = uud_comment = ""
            uud_photos: List[str] = []
            accept_by = accept_date = accept_time = ""

            for h in (uud.get("history") or []):
                if h.get("fix"):
                    fix = h["fix"]
                    if fix.get("kind") in (None, "impossible", "not_resolved"):
                        uud_by = (fix.get("by") or uud_by or "").strip()
                        uud_comment = (fix.get("comment") or uud_comment or "").strip()
                        if not (uud_date and uud_time):
                            uud_date, uud_time = split_dt(fix.get("at"))
                        _ph_all = list(fix.get("photos") or [])
                        if _ph_all:
                            uud_photos = list(dict.fromkeys([str(p) for p in _ph_all]))
                if h.get("decision"):
                    dec = h["decision"]
                    accept_by = (dec.get("by") or accept_by or "").strip()
                    accept_date, accept_time = split_dt(dec.get("at"))

            max_uud_ph = max(max_uud_ph, len(uud_photos))

            # –∫–ª—é—á –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
            row_key = (
                vin.strip().upper(),
                (detail or "").lower(), (defect or "").lower(), (grade or "").lower(),
                found_date, found_time, (controller or "").lower(),
                (uud_by or "").lower(), uud_date, uud_time, (uud_comment or "").lower(),
                (accept_by or "").lower(), accept_date, accept_time,
            )
            if row_key in seen:
                continue
            seen.add(row_key)

            rows.append({
                # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / –±–∞–∑–æ–≤—ã–µ
                "vin": vin,
                "brand": base.get("brand", ""),
                "model": base.get("model", ""),
                "body_color": base.get("body_color", ""),
                "config_code": base.get("config_code", ""),
                "doc_date": doc_date, "doc_time": doc_time, "doc_by": doc_by,
                "doc_photos": doc_photos,

                # –î–µ—Ñ–µ–∫—Ç (—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π)
                "detail": detail, "defect": defect, "grade": grade,
                "found_date": found_date, "found_time": found_time, "found_by": controller,
                "def_photos": def_photos,

                # –£–£–î
                "uud_by": uud_by, "uud_date": uud_date, "uud_time": uud_time, "uud_comment": uud_comment,
                "uud_photos": uud_photos,
                "uud_accept_by": accept_by, "uud_accept_date": accept_date, "uud_accept_time": accept_time,
            })

        # ---- –í–ê–ñ–ù–û: –µ—Å–ª–∏ (—Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞) impossible –Ω–µ –Ω–∞—à–ª–∏
        if not has_impossible:
            # –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            if norm_grade_filter is None:
                base_key = (vin.strip().upper(), "__base__", doc_date, doc_time, (doc_by or "").lower())
                if base_key not in seen:
                    seen.add(base_key)
                    rows.append({
                        "vin": vin,
                        "brand": base.get("brand", ""),
                        "model": base.get("model", ""),
                        "body_color": base.get("body_color", ""),
                        "config_code": base.get("config_code", ""),
                        "doc_date": doc_date, "doc_time": doc_time, "doc_by": doc_by,
                        "doc_photos": doc_photos,

                        # –±–ª–æ–∫–∏ –î–µ—Ñ–µ–∫—Ç/–£–£–î ‚Äî –ø—É—Å—Ç—ã–µ
                        "detail": "", "defect": "", "grade": "",
                        "found_date": "", "found_time": "", "found_by": "",
                        "def_photos": [],
                        "uud_by": "", "uud_date": "", "uud_time": "", "uud_comment": "",
                        "uud_photos": [],
                        "uud_accept_by": "", "uud_accept_date": "", "uud_accept_time": "",
                    })
            # —Å —Ñ–∏–ª—å—Ç—Ä–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º VIN (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ (—á—Ç–æ–±—ã –∫–æ–ª–æ–Ω–∫–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏)
    max_doc_ph = max(max_doc_ph, MIN_DOC_PHOTO_COLS)
    max_def_ph = max(max_def_ph, MIN_DEF_PHOTO_COLS)
    max_uud_ph = max(max_uud_ph, MIN_UUD_PHOTO_COLS)

    return rows, max_doc_ph, max_def_ph, max_uud_ph

def image_scale_for_draw(
    image_stream: io.BytesIO,
    draw_max_width_px: int,
    draw_max_height_px: int,
) -> tuple[float, float]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã x_scale/y_scale –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ Excel —Ç–∞–∫,
    —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–º–µ—â–∞–ª–∞—Å—å –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, 140√ó110 px) –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π.
    """
    try:
        pos = image_stream.tell()
        image_stream.seek(0)
        im = Image.open(image_stream)
        w, h = im.size
        image_stream.seek(pos)  # –≤–µ—Ä–Ω—É—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å
        if not w or not h:
            return 1.0, 1.0
        sx = min(draw_max_width_px / float(w), 1.0)
        sy = min(draw_max_height_px / float(h), 1.0)
        return sx, sy
    except Exception:
        return 1.0, 1.0

# ====== –í–¨–Æ–®–ö–ê –≠–ö–°–ü–û–†–¢–ê ======
@require_POST
@login_required
def export_documentation_extended(request):
    # ---- 0) –ø—Ä–∏–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ VIN'–æ–≤ (JSON –∏–ª–∏ form-data)
    vins = None
    grades_raw = None

    ctype = (request.content_type or "").lower()
    if "application/json" in ctype:
        try:
            data = json.loads((request.body or b"").decode("utf-8") or "{}")
        except Exception:
            data = {}
        vins = data.get("vins_json")
        grades_raw = data.get("grades")  # ‚Üê –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥—Ä–µ–π–¥—ã –∏–∑ JSON
    else:
        vins = request.POST.get("vins_json")
        # –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ grades[]=... –∏ grades=... (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        grades_raw = (request.POST.getlist("grades[]")
                      or request.POST.getlist("grades")
                      or request.POST.get("grades"))

    # vins_json –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ JSON
    if isinstance(vins, str):
        try:
            vins = json.loads(vins)
        except json.JSONDecodeError:
            return HttpResponseBadRequest("Bad vins_json")

    if not isinstance(vins, list) or not vins:
        return HttpResponseBadRequest("vins_json (list) is required")

    vins = [str(v).strip() for v in vins if str(v).strip()]
    if not vins:
        return HttpResponseBadRequest("Empty VINs")

    # ---- 1) —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä–µ–π–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    def _parse_grades(raw):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ–º: ["V1+","V1"] –ò–õ–ò "V1+,V1" –ò–õ–ò JSON-—Å—Ç—Ä–æ–∫—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ {'V1+','V1','V2','V3'} –ª–∏–±–æ None (–∑–Ω–∞—á–∏—Ç: –≤—Å–µ).
        """
        allowed = {"V1+", "V1", "V2", "V3"}
        if not raw:
            return None

        vals = None
        if isinstance(raw, (list, tuple)):
            vals = list(raw)
        elif isinstance(raw, str):
            # –ø—Ä–æ–±—É–µ–º –∫–∞–∫ JSON
            try:
                j = json.loads(raw)
                if isinstance(j, (list, tuple)):
                    vals = list(j)
                else:
                    vals = [s.strip() for s in raw.split(",") if s.strip()]
            except Exception:
                vals = [s.strip() for s in raw.split(",") if s.strip()]
        else:
            return None

        norm = {str(x).strip().upper().replace(" ", "") for x in vals}
        norm &= allowed
        return norm or None

    grade_filter = _parse_grades(grades_raw)

    # ---- 2) —Å–æ–±—Ä–∞—Ç—å –ø–ª–æ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ –¥–µ—Ñ–µ–∫—Ç) –∏ –º–∞–∫—Å–∏–º—É–º—ã –ø–æ —Ñ–æ—Ç–æ
    rows, max_doc_ph, max_def_ph, max_uud_ph = collect_rows(vins, grade_filter=grade_filter)

    # ---- —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ VIN –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –∑–∞–ø—Ä–æ—à–µ–Ω—ã
    vin_groups = OrderedDict()
    for v in vins:
        vin_groups[v] = []
    for r in rows:
        v = r.get("vin") or ""
        if v not in vin_groups:
            vin_groups[v] = []
        vin_groups[v].append(r)

    # ---- 3) —Å–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É
    output = io.BytesIO()
    wb = xlsxwriter.Workbook(
        output,
        {"in_memory": True, "strings_to_urls": False, "constant_memory": True},
    )
    ws = wb.add_worksheet("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")

    # ---- —Ñ–æ—Ä–º–∞—Ç—ã
    fmt_head_group = wb.add_format({
        "bold": True, "align": "center", "valign": "vcenter",
        "bg_color": "#E6F2FF", "border": 1
    })
    fmt_head = wb.add_format({
        "bold": True, "align": "center", "valign": "vcenter",
        "text_wrap": True, "bg_color": "#F2F2F2", "border": 1
    })
    fmt_text = wb.add_format({"text_wrap": True, "valign": "top", "border": 1})
    fmt_center = wb.add_format({"align": "center", "valign": "top", "border": 1})
    fmt_merge = wb.add_format({"text_wrap": True, "align": "center", "valign": "vcenter", "border": 1})

    # ---- 4) —à–∞–ø–∫–∞ (–≥—Ä—É–ø–ø—ã –∏ –∫–æ–ª–æ–Ω–∫–∏)
    # –ì—Ä—É–ø–ø–∞ 1: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    doc_fixed_headers = [
        "VIN", "–ë—Ä–µ–Ω–¥", "–ú–æ–¥–µ–ª—å", "–¶–≤–µ—Ç", "–ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏",
        "–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è", "–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–ª",
    ]
    doc_photo_headers = [f"–§–æ—Ç–æ  {i}" for i in range(1, max_doc_ph + 1)]

    # –ì—Ä—É–ø–ø–∞ 2: –¶–µ—Ö (–¥–µ—Ñ–µ–∫—Ç)
    plant_fixed_headers = [
        "–î–µ—Ç–∞–ª—å", "–î–µ—Ñ–µ–∫—Ç", "–ì—Ä–µ–π–¥",
        "–î–∞—Ç–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è", "–ö—Ç–æ –Ω–∞—à—ë–ª",
    ]
    plant_photo_headers = [f"–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ {i}" for i in range(1, max_def_ph + 1)]

    # –ì—Ä—É–ø–ø–∞ 3: –£–£–î
    uud_fixed_headers  = ["–ö—Ç–æ —Å –£–£–î –æ—Ç–º–µ—Ç–∏–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º", "–î–∞—Ç–∞ —Å –£–£–î", "–í—Ä–µ–º—è —Å –£–£–î", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –£–£–î"]
    uud_photo_headers  = [f"–§–æ—Ç–æ —Å –£–£–î {i}" for i in range(1, max_uud_ph + 1)]
    uud_tail_headers   = ["–ö—Ç–æ –ø—Ä–∏–Ω—è–ª —Å –£–£–î", "–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", "–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è"]

    headers = (
        doc_fixed_headers + doc_photo_headers +
        plant_fixed_headers + plant_photo_headers +
        uud_fixed_headers + uud_photo_headers + uud_tail_headers
    )

    # —à–∏—Ä–∏–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    col_widths = []
    col_widths += [20, 14, 18, 14, 18, 12, 10, 14]                      # –¥–æ–∫ —Ñ–∏–∫—Å
    col_widths += [18] * len(doc_photo_headers)                          # –¥–æ–∫ —Ñ–æ—Ç–æ
    col_widths += [28, 22, 10, 14, 10, 16]                               # —Ü–µ—Ö —Ñ–∏–∫—Å
    col_widths += [18] * len(plant_photo_headers)                        # —Ü–µ—Ö —Ñ–æ—Ç–æ
    col_widths += [24, 12, 10, 28]                                       # uud —Ñ–∏–∫—Å
    col_widths += [18] * len(uud_photo_headers)                          # uud —Ñ–æ—Ç–æ
    col_widths += [18, 12, 10]                                           # uud —Ö–≤–æ—Å—Ç

    # —Å—Ç—Ä–æ–∫–∞ 0 ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥—Ä—É–ø–ø
    col = 0
    g1_start = col; col += len(doc_fixed_headers) + len(doc_photo_headers); g1_end = col - 1
    if g1_end >= g1_start:
        ws.merge_range(0, g1_start, 0, g1_end, "–î–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", fmt_head_group)

    g2_start = col; col += len(plant_fixed_headers) + len(plant_photo_headers); g2_end = col - 1
    if g2_end >= g2_start:
        ws.merge_range(0, g2_start, 0, g2_end, "–î–∞–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç–∞", fmt_head_group)

    g3_start = col; col += len(uud_fixed_headers) + len(uud_photo_headers) + len(uud_tail_headers); g3_end = col - 1
    if g3_end >= g3_start:
        ws.merge_range(0, g3_start, 0, g3_end, "–î–∞–Ω–Ω—ã–µ —Å –£–£–î", fmt_head_group)

    # —Å—Ç—Ä–æ–∫–∞ 1 ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    for c, h in enumerate(headers):
        ws.write(1, c, h, fmt_head)
        if c < len(col_widths):
            ws.set_column(c, c, col_widths[c])

    # –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ (–ø–æ–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å)
    def calc_slices():
        c = 0
        doc_fixed = list(range(c, c + len(doc_fixed_headers)));   c += len(doc_fixed_headers)
        doc_ph    = list(range(c, c + len(doc_photo_headers)));   c += len(doc_photo_headers)
        p_fixed   = list(range(c, c + len(plant_fixed_headers))); c += len(plant_fixed_headers)
        p_ph      = list(range(c, c + len(plant_photo_headers))); c += len(plant_photo_headers)
        uud_fixed = list(range(c, c + len(uud_fixed_headers)));   c += len(uud_fixed_headers)
        uud_ph    = list(range(c, c + len(uud_photo_headers)));   c += len(uud_photo_headers)
        uud_tail  = list(range(c, c + len(uud_tail_headers)));    c += len(uud_tail_headers)
        return doc_fixed, doc_ph, p_fixed, p_ph, uud_fixed, uud_ph, uud_tail

    doc_fixed_idx, doc_ph_idx, p_fixed_idx, p_ph_idx, uud_fixed_idx, uud_ph_idx, uud_tail_idx = calc_slices()

    # –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø–æ VIN-–≥—Ä—É–ø–ø–µ
    merge_cols = doc_fixed_idx[:5]  # VIN, –ë—Ä–µ–Ω–¥, –ú–æ–¥–µ–ª—å, –¶–≤–µ—Ç, –ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏

    # –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ —Ñ–æ—Ç–æ –∏ —Ä–∞–∑–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    ws.set_default_row(120)  # ~–≤—ã—Å–æ—Ç–∞ –ø–æ–¥ 110px –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    DOC_PHOTO_MAX_W = 120
    DOC_PHOTO_MAX_H = 120
    DEF_PHOTO_MAX_W = 120
    DEF_PHOTO_MAX_H = 120
    UUD_PHOTO_MAX_W = 120
    UUD_PHOTO_MAX_H = 110

    # ---- 5) –¥–∞–Ω–Ω—ã–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø–æ VIN
    row_xlsx = 2

    for vin, items in vin_groups.items():
        if not items:
            continue

        group_start = row_xlsx

        # –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≥—Ä—É–ø–ø—ã
        first = items[0]
        merge_values = [
            first.get("vin") or "",
            first.get("brand") or "",
            first.get("model") or "",
            first.get("body_color") or "",
            first.get("config_code") or "",
        ]

        for i, r in enumerate(items):
            # --- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å
            if i == 0:
                base5 = merge_values
            else:
                base5 = ["", "", "", "", ""]

            rest_doc_fixed = [
                r.get("doc_date", ""), r.get("doc_time", ""), r.get("doc_by", "")
            ]
            values_doc_fixed = base5 + rest_doc_fixed

            for c, val in zip(doc_fixed_idx, values_doc_fixed):
                is_center = (c in (doc_fixed_idx[5], doc_fixed_idx[6]))
                ws.write(row_xlsx, c, val, fmt_center if is_center else fmt_text)

            # --- –§–æ—Ç–æ ¬´–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è¬ª: –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–æ scale
            for j, c in enumerate(doc_ph_idx):
                p = r["doc_photos"][j] if j < len(r["doc_photos"]) else None
                if p:
                    bio = image_stream_from_media(p, jpeg_quality=92)
                    if bio:
                        sx, sy = image_scale_for_draw(bio, DOC_PHOTO_MAX_W, DOC_PHOTO_MAX_H)
                        ws.insert_image(
                            row_xlsx, c, "doc.jpg",
                            {"image_data": bio, "x_offset": 4, "y_offset": 4, "x_scale": sx, "y_scale": sy}
                        )

            # --- –¶–µ—Ö —Ñ–∏–∫—Å
            pfx = [
                r.get("detail",""), r.get("defect",""), r.get("grade",""),
                r.get("found_date",""), r.get("found_time",""), r.get("found_by",""),
            ]
            for c, val in zip(p_fixed_idx, pfx):
                is_center = (c in (p_fixed_idx[3], p_fixed_idx[4]))
                ws.write(row_xlsx, c, val, fmt_center if is_center else fmt_text)

            # --- –§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ (—Å–æ scale)
            for j, c in enumerate(p_ph_idx):
                p = r["def_photos"][j] if j < len(r["def_photos"]) else None
                if p:
                    bio = image_stream_from_media(p, jpeg_quality=92)
                    if bio:
                        sx, sy = image_scale_for_draw(bio, DEF_PHOTO_MAX_W, DEF_PHOTO_MAX_H)
                        ws.insert_image(
                            row_xlsx, c, "defect.jpg",
                            {"image_data": bio, "x_offset": 4, "y_offset": 4, "x_scale": sx, "y_scale": sy}
                        )

            # --- UUD —Ñ–∏–∫—Å
            ufx = [r.get("uud_by",""), r.get("uud_date",""), r.get("uud_time",""), r.get("uud_comment","")]
            for c, val in zip(uud_fixed_idx, ufx):
                is_center = (c in (uud_fixed_idx[1], uud_fixed_idx[2]))
                ws.write(row_xlsx, c, val, fmt_center if is_center else fmt_text)

            # --- –§–æ—Ç–æ UUD (—Å–æ scale)
            for j, c in enumerate(uud_ph_idx):
                p = r["uud_photos"][j] if j < len(r["uud_photos"]) else None
                if p:
                    bio = image_stream_from_media(p, jpeg_quality=92)
                    if bio:
                        sx, sy = image_scale_for_draw(bio, UUD_PHOTO_MAX_W, UUD_PHOTO_MAX_H)
                        ws.insert_image(
                            row_xlsx, c, "uud.jpg",
                            {"image_data": bio, "x_offset": 4, "y_offset": 4, "x_scale": sx, "y_scale": sy}
                        )

            # --- UUD —Ö–≤–æ—Å—Ç
            utail = [r.get("uud_accept_by",""), r.get("uud_accept_date",""), r.get("uud_accept_time","")]
            for c, val in zip(uud_tail_idx, utail):
                is_center = (c in (uud_tail_idx[1], uud_tail_idx[2]))
                ws.write(row_xlsx, c, val, fmt_center if is_center else fmt_text)

            row_xlsx += 1

        group_end = row_xlsx - 1
        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º VIN/–ë—Ä–µ–Ω–¥/–ú–æ–¥–µ–ª—å/–¶–≤–µ—Ç/–ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫ > 1
        if group_end > group_start:
            for c, val in zip(merge_cols, merge_values):
                ws.merge_range(group_start, c, group_end, c, val, fmt_merge)

    # ---- 6) –æ—Ç–¥–∞—Ç—å —Ñ–∞–π–ª
    wb.close()
    output.seek(0)

    now = datetime.now()
    fname = f"documentation_extended_{now:%Y-%m-%d_%H-%M}.xlsx"
    resp = HttpResponse(
        output.read(),
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
    resp["Content-Disposition"] = f'attachment; filename="{fname}"'
    return resp







# marriage post, table and export
from django.db.models import OuterRef, Subquery
from django.db.models.functions import Coalesce
from django.db.models import OuterRef, Subquery, Q
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment


@login_required
@role_required(["controller", "master", "head_area"])
def marriage_view(request):
    """
    GET  -> —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π (VIN + –î–í–° + –ö–ü–ü)
    POST -> —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å VehicleIdentifiers
    """
    if request.method == "POST":
        vin = (request.POST.get("vin_number") or "").strip().upper()
        eng = (request.POST.get("engine_number") or "").strip()
        trans = (request.POST.get("transmission_number") or "").strip()

        if len(vin) != 17:
            messages.error(request, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN (17 —Å–∏–º–≤–æ–ª–æ–≤).")
            return redirect(request.path)

        obj, created = VehicleIdentifiers.objects.get_or_create(
            vin=vin,
            defaults={
                "engine_number": eng or None,
                "transmission_number": trans or None,
                "saved_by": request.user,
            },
        )
        if not created:
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ
            if eng:
                obj.engine_number = eng
            if trans:
                obj.transmission_number = trans
            if not obj.saved_by:
                obj.saved_by = request.user
            obj.save(update_fields=["engine_number", "transmission_number", "saved_by", "updated_at"])

        messages.success(request, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return redirect(f"{request.path}?vin={vin}")

    # GET
    ctx = {"prefill_vin": (request.GET.get("vin") or "").strip().upper()}
    return render(request, "assembly/marriage.html", ctx)


@login_required
@permission_required('users.access_to_the_marriage_table', raise_exception=True)
def marriage_table_view(request):
    """
    –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π VehicleIdentifiers c –ø–æ–¥—Ç—è–∂–∫–æ–π brand/model –∏–∑ TraceData –ø–æ VIN.
    –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è/—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (query-string), —Å–º. —à–∞–±–ª–æ–Ω.
    """
    # –ü–æ–¥–∑–∞–ø—Ä–æ—Å—ã: –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–Æ–Æ –∑–∞–ø–∏—Å—å –∏–∑ TraceData –ø–æ vin_rk –∏–ª–∏ vin_c
    td_by_rk = (TraceData.objects
                .filter(vin_rk=OuterRef("vin"))
                .order_by("-date_added"))
    td_by_c = (TraceData.objects
               .filter(vin_c=OuterRef("vin"))
               .order_by("-date_added"))

    qs = (VehicleIdentifiers.objects
          .select_related("saved_by")
          .annotate(
              brand_rk=Subquery(td_by_rk.values("brand")[:1]),
              brand_c=Subquery(td_by_c.values("brand")[:1]),
              brand=Coalesce("brand_rk", "brand_c"),

              model_rk=Subquery(td_by_rk.values("model")[:1]),
              model_c=Subquery(td_by_c.values("model")[:1]),
              model=Coalesce("model_rk", "model_c"),
          )
          .order_by("-updated_at"))

    context = {
        "records": qs,  # —à–∞–±–ª–æ–Ω —á–∏—Ç–∞–µ—Ç .vin .brand .model .engine_number .transmission_number .created_at .saved_by
    }
    return render(request, "assembly/marriage_table.html", context)






@login_required
@permission_required('users.access_to_the_marriage_table', raise_exception=True)
def marriage_table_export(request):
    """
    XLSX —ç–∫—Å–ø–æ—Ä—Ç ¬´Marriage ‚Äî —Ç–∞–±–ª–∏—Ü–∞¬ª.
    –ö–æ–ª–æ–Ω–∫–∏: VIN RK, VIN China, –ë—Ä–µ–Ω–¥, –ú–æ–¥–µ–ª—å, –ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, –î–≤–∏–≥–∞—Ç–µ–ª—å (–∫–æ–¥), –î–≤–∏–≥–∞—Ç–µ–ª—å, –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (–∫–æ–¥), –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, –ü—Ä–∏–≤–æ–¥ (–∫–æ–¥), –ü—Ä–∏–≤–æ–¥, ‚Ññ –î–í–°, ‚Ññ –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏, –ú–∞—Ç-–∫–æ–¥, –î–µ–Ω—å, –í—Ä–µ–º—è, –ö—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª.
    –î–µ–Ω—å/–í—Ä–µ–º—è –±–µ—Ä—ë–º –ò–ó updated_at (–ª–æ–∫–∞–ª—å–Ω–æ, –ø–æ settings.TIME_ZONE).
    –î–∏–∞–ø–∞–∑–æ–Ω—ã day_from/day_to –∏ time_from/time_to –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ updated_at.
    """
    # ----- –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä–µ–π—Å–∏–Ω–≥—É -----
    td_by_rk = TraceData.objects.filter(vin_rk=OuterRef("vin")).order_by("-date_added")
    td_by_c  = TraceData.objects.filter(vin_c =OuterRef("vin")).order_by("-date_added")

    qs = (VehicleIdentifiers.objects
          .select_related("saved_by")
          .annotate(
              brand_rk = Subquery(td_by_rk.values("brand")[:1]),
              brand_c  = Subquery(td_by_c.values("brand")[:1]),
              model_rk = Subquery(td_by_rk.values("model")[:1]),
              model_c  = Subquery(td_by_c.values("model")[:1]),
              config_code_rk = Subquery(td_by_rk.values("config_code")[:1]),
              config_code_c  = Subquery(td_by_c.values("config_code")[:1]),
              # –≤–º–µ—Å—Ç–æ vin_c —Ç–µ–ø–µ—Ä—å —Ç—è–Ω–µ–º body_number –¥–ª—è VIN China
              body_number_rk = Subquery(td_by_rk.values("body_number")[:1]),
              body_number_c  = Subquery(td_by_c.values("body_number")[:1]),
              engine_volume_rk = Subquery(td_by_rk.values("engine_volume")[:1]),
              engine_volume_c  = Subquery(td_by_c.values("engine_volume")[:1]),
          ))

    # ----- –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è/—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏/–ø—Ä–∏–≤–æ–¥–∞ –∏–∑ config_code -----
    ENGINE_MAP = {
        "E4G": "SQRE4G15C",
        "E4T": "SQRE4T15C",
        "J16": "SQRF4J16",
        "J20": "SQRF4J20",
        "F4J": "SQRF4J16C",
        "J15": "SQRH4J15",
    }
    TRANS_MAP = {
        "C8": "CVT18",
        "D6": "6DCT",
        "D7": "7DCT",
        "A8": "8AT",
    }
    DRIVE_MAP = {
        "2": "2WD",
        "A": "AWD",
        "4": "4WD",
    }
    ROOF_MAP = {
        "P": "Panoramic",
        "N": "Normal",
        "S": "Sunroof",
    }
    SPEC_MAP = {
        "S": "Style",
        "E": "Elite",
        "R": "Prime",
        "U": "Ultimate",
        "F": "Flagship",
        "A": "Ultra",
        "C": "Comfort",
        "P": "Premium",
        "Y": "Luxury",
    }

    def decode_from_config(cfg: str) -> tuple[str, str, str, str, str, str, str, str, str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (eng_code, eng_full, trans_code, trans_full, drive_code, drive_full, roof_code, roof_full, spec_code, spec_full).
        –ü–æ–∑–∏—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1): 8‚Äì10 –¥–≤–∏–≥–∞—Ç–µ–ª—å, 11‚Äì12 —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, 13 –ø—Ä–∏–≤–æ–¥, 14 roof, 15 spec.
        """
        if not cfg:
            return "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî"
        s = str(cfg).strip()
        if len(s) < 15:
            return "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî", "‚Äî"
        eng_code = s[7:10]
        trans_code = s[10:12]
        drive_code = s[12]
        roof_code = s[13]
        spec_code = s[14]
        eng_full = ENGINE_MAP.get(eng_code, "‚Äî")
        trans_full = TRANS_MAP.get(trans_code, "‚Äî")
        drive_full = DRIVE_MAP.get(drive_code, "‚Äî")
        roof_full = ROOF_MAP.get(roof_code, "‚Äî")
        spec_full = SPEC_MAP.get(spec_code, "‚Äî")
        return (
            eng_code or "‚Äî", eng_full,
            trans_code or "‚Äî", trans_full,
            drive_code or "‚Äî", drive_full,
            roof_code or "‚Äî", roof_full,
            spec_code or "‚Äî", spec_full,
        )

    # ----- —á—Ç–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ -----
    p = request.GET
    q_vin = (p.get("q") or "").strip()
    brands = [s for s in (p.get("brand") or "").split(",") if s]
    models = [s for s in (p.get("model") or "").split(",") if s]
    saved_by_vals = [s for s in (p.get("saved_by") or "").split(",") if s]
    day_from = (p.get("day_from") or "").strip()
    day_to   = (p.get("day_to") or "").strip()
    time_from = (p.get("time_from") or "").strip()
    time_to   = (p.get("time_to") or "").strip()

    # ----- –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ -----
    if q_vin:
        qs = qs.filter(vin__icontains=q_vin)

    if brands:
        cond = Q(brand_rk__in=brands) | Q(brand_c__in=brands)
        if "‚Äî" in brands:
            cond |= (Q(brand_rk__isnull=True) & Q(brand_c__isnull=True))
        qs = qs.filter(cond)

    if models:
        cond = Q(model_rk__in=models) | Q(model_c__in=models)
        if "‚Äî" in models:
            cond |= (Q(model_rk__isnull=True) & Q(model_c__isnull=True))
        qs = qs.filter(cond)

    if saved_by_vals:
        cond = Q(saved_by__username__in=saved_by_vals)
        if "‚Äî" in saved_by_vals:
            cond |= Q(saved_by__isnull=True)
        qs = qs.filter(cond)

    # –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –î–ù–Æ (updated_at)
    if day_from:
        qs = qs.filter(updated_at__date__gte=day_from)
    if day_to:
        qs = qs.filter(updated_at__date__lte=day_to)

    # –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –í–†–ï–ú–ï–ù–ò (updated_at)
    def _parse_time(s):
        if not s: return None
        for fmt in ("%H:%M:%S", "%H:%M"):
            try: return datetime.strptime(s, fmt).time()
            except ValueError: pass
        return None

    tf = _parse_time(time_from)
    tt = _parse_time(time_to)
    if tf:
        qs = qs.filter(updated_at__time__gte=tf)
    if tt:
        qs = qs.filter(updated_at__time__lte=tt)

    qs = qs.order_by("-updated_at")

    # ----- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ XLSX -----
    wb = Workbook()
    ws = wb.active
    ws.title = "Marriage"

    headers = [
        "VIN RK", "VIN China", "–ë—Ä–µ–Ω–¥", "–ú–æ–¥–µ–ª—å", "–ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏",
        "–î–≤–∏–≥–∞—Ç–µ–ª—å (–∫–æ–¥)", "–î–≤–∏–≥–∞—Ç–µ–ª—å", "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (–∫–æ–¥)", "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", "–ü—Ä–∏–≤–æ–¥ (–∫–æ–¥)", "–ü—Ä–∏–≤–æ–¥",
        "Roof (–∫–æ–¥)", "Roof", "Spec (–∫–æ–¥)", "Spec",
        "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞",
        "‚Ññ –î–í–°", "‚Ññ –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏", "–ú–∞—Ç-–∫–æ–¥", "–î–µ–Ω—å", "–í—Ä–µ–º—è", "–ö—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª"
    ]
    ws.append(headers)
    for cell in ws[1]:
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center")
    ws.freeze_panes = "A2"

    def _calc_mat_code(model_val: str | None, vin_val: str) -> str:
        m = (model_val or "").strip().lower()
        try:
            if "tiggo 4" in m:
                code = make_mat_code_tiggo4(vin_val)
                return code or "‚Äî"
            if "tiggo 7" in m:
                code = make_mat_code_tiggo7(vin_val)
                return code or "‚Äî"
            if "tiggo 45" in m:
                code = make_mat_code_tiggo45(vin_val)  # noqa: F821
                return code or "‚Äî"
        except NameError:
            return "‚Äî"
        return "‚Äî"

    for obj in qs.iterator():
        brand = getattr(obj, "brand_rk", None) or getattr(obj, "brand_c", None) or "‚Äî"
        model = getattr(obj, "model_rk", None) or getattr(obj, "model_c", None) or "‚Äî"

        # VIN China = body_number –∏–∑ —Ç–æ–π –∂–µ –∑–∞–ø–∏—Å–∏ TraceData
        vin_china = getattr(obj, "body_number_rk", None) or getattr(obj, "body_number_c", None) or "‚Äî"

        config_code = getattr(obj, "config_code_rk", None) or getattr(obj, "config_code_c", None) or "‚Äî"

        # decode engine/trans/drive/roof/spec from config_code
        eng_code, eng_full, trans_code, trans_full, drive_code, drive_full, roof_code, roof_full, spec_code, spec_full = decode_from_config(config_code if isinstance(config_code, str) else str(config_code or ""))

        # --- ENGINE VOLUME ---
        engine_volume_val = getattr(obj, "engine_volume_rk", None)
        if engine_volume_val in (None, ""):
            engine_volume_val = getattr(obj, "engine_volume_c", None)
        engine_volume_str = str(engine_volume_val) if engine_volume_val not in (None, "") else "‚Äî"

        # nomenclature string
        nomenclature = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {brand} {model} {config_code}, {spec_full}, {trans_full}, {engine_volume_str}, {drive_full}"

        mat_code = _calc_mat_code(model, obj.vin)

        dt_local = timezone.localtime(obj.updated_at)
        day = dt_local.date().isoformat()
        time_str = dt_local.strftime("%H:%M")

        saved = getattr(obj.saved_by, "username", None) or "‚Äî"

        ws.append([
            obj.vin,                 # VIN RK
            vin_china,               # VIN China (body_number)
            brand,
            model,
            config_code,             # –ö–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            eng_code,                # –î–≤–∏–≥–∞—Ç–µ–ª—å (–∫–æ–¥)
            eng_full,                # –î–≤–∏–≥–∞—Ç–µ–ª—å (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            trans_code,              # –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (–∫–æ–¥)
            trans_full,              # –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            drive_code,              # –ü—Ä–∏–≤–æ–¥ (–∫–æ–¥)
            drive_full,              # –ü—Ä–∏–≤–æ–¥ (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            roof_code,               # Roof (–∫–æ–¥)
            roof_full,               # Roof (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            spec_code,               # Spec (–∫–æ–¥)
            spec_full,               # Spec (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
            nomenclature,            # –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
            obj.engine_number or "‚Äî",
            obj.transmission_number or "‚Äî",
            mat_code,
            day,
            time_str,
            saved,
        ])

    # —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (—É—á—Ç–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ VIN China –∏ –Ω–æ–≤–∞—è "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞")
    widths = [23, 23, 14, 20, 18, 12, 20, 14, 16, 10, 12, 10, 14, 10, 14, 40, 18, 18, 16, 12, 10, 18]
    for i, w in enumerate(widths, start=1):
        ws.column_dimensions[chr(64+i)].width = w

    resp = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    resp["Content-Disposition"] = 'attachment; filename="marriage_table.xlsx"'
    wb.save(resp)
    return resp






def make_mat_code_tiggo4(vin: str) -> str | None:
    """
    –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç-–∫–æ–¥–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Tiggo 45 –ø–æ VIN (—Ç–∞ –∂–µ –º–µ—Ö–∞–Ω–∏–∫–∞, —á—Ç–æ –∏ Tiggo 7):
      - –ë–µ—Ä—ë–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é TraceData –ø–æ VIN (vin_rk -> vin_c).
      - –ü–æ config_code –≤—ã–±–∏—Ä–∞–µ–º –®–ê–ë–õ–û–ù (–≤–Ω—É—Ç—Ä–∏ '**' ‚Äî –º–µ—Å—Ç–æ –¥–ª—è 2-—Å–∏–º–≤. –∫–æ–¥–∞ —Ü–≤–µ—Ç–∞).
      - –¶–≤–µ—Ç: –±–µ—Ä—ë–º body_color, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã, upper.
        –ï—Å–ª–∏ –†–û–í–ù–û 2 —Å–∏–º–≤–æ–ª–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–º–µ—Å—Ç–æ '**', –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º '**'.

    –í–ê–ñ–ù–û: –Ω–∏–∂–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ config_code (template).
    –î–∞–π —É—Å–ª–æ–≤–∏—è (–ø–æ–∑–∏—Ü–∏–∏/—Å–∏–º–≤–æ–ª—ã) –∏ —Å—Ç—Ä–æ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ ‚Äî –≤—Å—Ç–∞–≤–ª—é.
    """
    from supplies.models import TraceData

    vin = (vin or "").strip().upper()
    if not vin:
        return None

    # 1) —Å–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
    td = (TraceData.objects
          .filter(vin_rk=vin)
          .order_by("-date_added")
          .first())
    if not td:
        td = (TraceData.objects
              .filter(vin_c=vin)
              .order_by("-date_added")
              .first())
    if not td:
        return None

    cfg = (td.config_code or "").strip()
    if len(cfg) < 15:
        return None

    # 2) –í–´–ë–û–† –®–ê–ë–õ–û–ù–ê –ü–û –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–ò (–ó–ê–ü–û–õ–ù–ò–¢–¨!)
    # –ü—Ä–∏–º–µ—Ä—ã, –∫–∞–∫ –±—ã–ª–æ —É –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π:
    # - if cfg[14].upper() == 'X': template = "T71XXK?**AB0001"
    # - elif cfg[13:15].upper() == 'YZ': template = "T71YYK?**CD0002"
    # - else: return None
    template = None  # <<< TODO: –∑–∞–¥–∞—Ç—å —à–∞–±–ª–æ–Ω(—ã) –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º config_code

    if not template:
        return None

    # 3) –¶–≤–µ—Ç: –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ 2 —Å–∏–º–≤–æ–ª–∞
    filtered_color = "".join(ch for ch in (td.body_color or "") if ch.isalnum()).upper()
    if len(filtered_color) == 2:
        return template.replace("**", filtered_color)
    return template



def make_mat_code_tiggo7(vin: str) -> str | None:
    """
    –ú–∞—Ç-–∫–æ–¥ –¥–ª—è Tiggo 7 –ø–æ VIN.

    –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏–∑ config_code:
      - PRIME:   14‚Äì15-–π —Å–∏–º–≤–æ–ª—ã == 'PR' -> —à–∞–±–ª–æ–Ω 'T7161K2**FF0008'
      - ULTIMATE: 15-–π —Å–∏–º–≤–æ–ª == 'U'     -> —à–∞–±–ª–æ–Ω 'T7161K3**FG0008'

    –¶–≤–µ—Ç:
      - –ë–µ—Ä—ë–º body_color –∏–∑ TraceData, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã, upper.
      - –ï—Å–ª–∏ –†–û–í–ù–û 2 —Å–∏–º–≤–æ–ª–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–º–µ—Å—Ç–æ '**'.
      - –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ != 2 (–≤ —Ç.—á. > 2) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º '**' –∫–∞–∫ –µ—Å—Ç—å.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é/—Ç—Ä–µ–π—Å–∏–Ω–≥.
    """
    from supplies.models import TraceData

    vin = (vin or "").strip().upper()
    if not vin:
        return None

    # —Å–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ (—Å–Ω–∞—á–∞–ª–∞ vin_rk, –ø–æ—Ç–æ–º vin_c)
    td = (TraceData.objects
          .filter(vin_rk=vin)
          .order_by("-date_added")
          .first())
    if not td:
        td = (TraceData.objects
              .filter(vin_c=vin)
              .order_by("-date_added")
              .first())
    if not td:
        return None

    cfg = (td.config_code or "").strip()
    if len(cfg) < 15:
        return None

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é (–≤–∞–∂–Ω–æ —Å–ø–µ—Ä–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å 'PR', –∑–∞—Ç–µ–º 'U')
    is_prime = cfg[13:15].upper() == "PR"   # 14‚Äì15-–π —Å–∏–º–≤–æ–ª—ã
    is_ultimate = cfg[14].upper() == "U"    # 15-–π —Å–∏–º–≤–æ–ª

    if not (is_prime or is_ultimate):
        return None

    template = "T7161K2**FF0008" if is_prime else "T7161K3**FG0008"

    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ 2 —Å–∏–º–≤–æ–ª–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º)
    filtered = "".join(ch for ch in (td.body_color or "") if ch.isalnum()).upper()
    if len(filtered) == 2:
        return template.replace("**", filtered)
    return template











